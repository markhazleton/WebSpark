@model string  // This model is the workflow name passed from the controller

@{
    ViewData["Title"] = "Workflow Flowchart";
}

@section Styles {
    <style>
        /* Restrict node width to make the flowchart more compact */
        .mermaid svg .node rect, .mermaid svg .node polygon {
            max-width: 100px;
        }
    </style>
}

<h2>Workflow Flowchart for "@Model"</h2>

<!-- Container to hold the Mermaid flowchart -->
<div id="flowchart-container">
    <!-- The diagram will be rendered and injected here -->
</div>

<!-- Modal Structure -->
<div class="modal fade" id="nodeModal" tabindex="-1" role="dialog" aria-labelledby="nodeModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="nodeModalLabel">Node Details</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p><strong>Node ID:</strong> <span id="modalNodeId"></span></p>
                <p><strong>Question:</strong> <span id="modalQuestion"></span></p>
                <div>
                    <strong>Answers:</strong>
                    <ul id="modalAnswers"></ul>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" id="manualCloseButton">Close</button>
            </div>
        </div>
    </div>
</div>

@section HeadScripts {
    <!-- Load Mermaid via CDN -->
    <script type="module">
        import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';

        // Initialize Mermaid with custom settings
        mermaid.initialize({
            startOnLoad: false,
            theme: 'base',
            flowchart: {
                useMaxWidth: false,
                nodeSpacing: 20,
                rankSpacing: 30,
                padding: 10
            }
        });

        window.mermaid = mermaid;
    </script>
}

@section Scripts {
    <script>

        document.addEventListener('DOMContentLoaded', function () {
            // Function to convert workflow data to Mermaid syntax with prefixed IDs and top-to-bottom layout
            function convertToMermaidSyntax(workflowData) {
                let mermaidSyntax = "graph TD\n";

                workflowData.nodes.forEach(node => {
                    const nodeId = `node_${node.id}`;
                    const shortLabel = `${node.id}`;
                    mermaidSyntax += `    ${nodeId}[${shortLabel}]\n`;

                    node.answers.forEach(answer => {
                        const nextNodeId = `node_${answer.nextNode}`;
                        mermaidSyntax += `    ${nodeId} -- "${answer.response}" --> ${nextNodeId}\n`;
                    });
                });
                return mermaidSyntax;
            }

            // Fetch workflow data and render it in Mermaid
            async function renderFlowchart() {
                try {
                    // Pass workflow name to the GetWorkflowData endpoint
                    const response = await fetch(`@Url.Action("GetWorkflowData")?fileName=${encodeURIComponent("@Model")}`);
                    const workflowData = await response.json();
                    console.log("Workflow data loaded:", workflowData);

                    const mermaidSyntax = convertToMermaidSyntax(workflowData);
                    console.log("Generated Mermaid Syntax:\n", mermaidSyntax);

                    const container = document.getElementById("flowchart-container");
                    const { svg } = await window.mermaid.render("generatedDiagram", mermaidSyntax);
                    container.innerHTML = svg;

                    addModalListeners(workflowData);
                } catch (error) {
                    console.error('Error loading or rendering workflow data:', error);
                }
            }

            // Function to add click event listeners to open modal for each node
            function addModalListeners(workflowData) {
                workflowData.nodes.forEach(node => {
                    const nodeId = `${node.id}`;

                    const nodeElements = document.querySelectorAll(`#flowchart-container svg foreignObject span.nodeLabel`);

                    nodeElements.forEach(element => {
                        if (element.textContent === nodeId) {
                            element.addEventListener("click", () => openNodeModal(node));
                        }
                    });
                });
            }

            // Function to open the modal with node details
            function openNodeModal(node) {
                document.getElementById("modalNodeId").textContent = node.id;
                document.getElementById("modalQuestion").textContent = node.question;

                const answersList = document.getElementById("modalAnswers");
                answersList.innerHTML = '';

                node.answers.forEach(answer => {
                    const listItem = document.createElement("li");
                    listItem.textContent = `${answer.response} → ${answer.nextNode}`;
                    answersList.appendChild(listItem);
                });

                document.getElementById("manualCloseButton").addEventListener("click", function()
                {
                    $('#nodeModal').modal('hide');
                });

                $('#nodeModal').modal('show');
            }

            renderFlowchart();
        });

    </script>
}
