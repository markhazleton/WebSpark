@model EditNodeViewModel

@{
    ViewData["Title"] = "Add New Node";
}

<h2>Add New Node</h2>

<form asp-action="AddNode" method="post">
    <div class="form-group">
        @Html.HiddenFor(m => m.FileName)
        <label asp-for="Id">Node ID</label>
        <input asp-for="Id" class="form-control" />
        <small class="form-text text-muted">The Node ID should be unique.</small>
        <span asp-validation-for="Id" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Question">Question</label>
        <input asp-for="Question" class="form-control" />
        <span asp-validation-for="Question" class="text-danger"></span>
    </div>

    <h3>Answers</h3>
    <div id="answersContainer">
        <!-- Initial empty answer item; no answers in a new node by default -->
    </div>

    <button type="button" class="btn btn-primary" onclick="addAnswer()">Add Answer</button>

    <div class="form-group mt-3">
        <button type="submit" class="btn btn-success">Save Node</button>
        <a asp-action="Index" class="btn btn-secondary">Cancel</a>
    </div>
</form>

@section Scripts {
    <script>
        // JavaScript to dynamically add and remove answers
        function addAnswer() {
            const answersContainer = document.getElementById("answersContainer");
            const answerIndex = answersContainer.children.length;

            const answerHtml = `
                <div class="answer-item" data-index="${answerIndex}">
                    <div class="form-group">
                        <label>Response</label>
                        <input name="Answers[${answerIndex}].Response" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Next Node</label>
                        <input name="Answers[${answerIndex}].NextNode" class="form-control" />
                    </div>
                    <button type="button" class="btn btn-danger" onclick="removeAnswer(this)">Remove Answer</button>
                    <hr />
                </div>
            `;
            answersContainer.insertAdjacentHTML("beforeend", answerHtml);
        }

        function removeAnswer(button) {
            const answerItem = button.closest(".answer-item");
            answerItem.remove();

            // Update the name attributes for remaining answers to keep indices sequential
            const answersContainer = document.getElementById("answersContainer");
            Array.from(answersContainer.children).forEach((item, index) => {
                item.setAttribute("data-index", index);
                item.querySelector("input[name$='Response']").setAttribute("name", `Answers[${index}].Response`);
                item.querySelector("input[name$='NextNode']").setAttribute("name", `Answers[${index}].NextNode`);
            });
        }
    </script>
}
