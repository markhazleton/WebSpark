@model                         Node

@{
    var workflow = ViewData["Workflow"] as Workflow;
    var visitedNodes = ViewData["VisitedNodes"] as List<string> ?? new List<string>();

    // If this node has already been visited, display a notice and prevent further recursion
    if (visitedNodes.Contains(Model.Id))
    {
        <li class="list-group-item text-warning">
            <strong>Loop detected:</strong> Node "@Model.Id" points back to an ancestor node.
        </li>
        return;
    }

    // Mark the current node as visited by adding it to the list
    visitedNodes.Add(Model.Id);

    var childNodes = Model.Answers
                          .Where(a => !string.IsNullOrEmpty(a.NextNode))
                          .Select(a => workflow?.Nodes.FirstOrDefault(n => n.Id == a.NextNode))
                          .Where(n => n != null)
                          .ToList();
}

<li class="list-group-item">
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">@Model.Question</h5>
            <p class="card-text">Node ID: @Model.Id</p>

            @if (Model.Answers != null && Model.Answers.Count > 0)
            {
                <ul class="list-group list-group-flush">
                    @foreach (var answer in Model.Answers)
                    {
                        <li class="list-group-item">
                            <strong>Response:</strong> @answer.Response
                            @if (!string.IsNullOrEmpty(answer.NextNode))
                            {
                                <span class="text-muted">→ Next Node: @answer.NextNode</span>
                            }
                        </li>
                    }
                </ul>
            }

            <!-- Recursive rendering of child nodes -->
            @if (childNodes.Count > 0)
            {
                <ul class="list-group mt-3">
                    @foreach (var childNode in childNodes)
                    {
                        <!-- Update ViewData["VisitedNodes"] with a new instance -->
                        ViewData["VisitedNodes"] = new List<string>(visitedNodes);
                        @Html.Partial("_TreeNode", childNode)
                    }
                </ul>
            }
        </div>
    </div>
</li>
