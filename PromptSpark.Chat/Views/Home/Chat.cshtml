@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

@section HeadScripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.9/signalr.min.js"></script>
}

<div class="container py-5">
    <div class="card">
        <div class="card-header text-center">
            <h2>PromptSpark Chat</h2>
        </div>
        <div class="card-body">
            <div id="userForm" class="mb-4">
                <label for="userInput" class="form-label">Enter your name to join the chat:</label>
                <input type="text" id="userInput" class="form-control" placeholder="Your name" />
                <button class="btn btn-primary mt-2" onclick="joinChat()">Join Chat</button>
            </div>
            <div id="chatWindow" style="display: none;">
                <ul id="messagesList" class="list-unstyled mb-3 p-3 border rounded bg-white" style="height: 300px; overflow-y: scroll;">
                </ul>
                <div class="input-group">
                    <input type="text" id="messageInput" class="form-control" placeholder="Type your message here..." />
                    <button class="btn btn-primary" onclick="sendMessage()">Send</button>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
          const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        let userName = "";
        let conversationId = localStorage.getItem("conversationId") || generateConversationId();
        let botMessageElement = null; // Reference to current bot message line
        localStorage.setItem("conversationId", conversationId);

        function generateConversationId() {
            return Math.random().toString(36).substring(2, 15);
        }

        async function start() {
            try {
                await connection.start();
                console.log("Connected to SignalR hub!");
            } catch (err) {
                console.error("Connection failed: ", err);
                setTimeout(start, 5000);
            }
        }

        connection.on("ReceiveMessage", (user, message) => {
            const messagesList = document.getElementById("messagesList");

            if (user === "ChatBot") {
                // Create a new message line for each new ChatBot response
                if (!botMessageElement) {
                    botMessageElement = document.createElement("li");
                    botMessageElement.classList.add("mb-2");
                    botMessageElement.setAttribute("data-user", "ChatBot");
                    botMessageElement.innerHTML = `<strong>${user}:</strong> <span class="bot-message-content"></span>`;
                    messagesList.appendChild(botMessageElement);
                }
                // Append each word to the bot message content span
                botMessageElement.querySelector(".bot-message-content").textContent += message + " ";
            } else {
                // Reset botMessageElement for a new bot response line in the next round
                botMessageElement = null;

                // Create a new message element for the user
                const li = document.createElement("li");
                li.classList.add("mb-2");
                li.innerHTML = `<strong>${user}:</strong> ${message}`;
                messagesList.appendChild(li);
            }

            // Scroll to the bottom of the chat
            messagesList.scrollTop = messagesList.scrollHeight;
        });

        function joinChat() {
            userName = document.getElementById("userInput").value.trim();
            if (userName) {
                document.getElementById("userForm").style.display = "none";
                document.getElementById("chatWindow").style.display = "block";
                document.getElementById("messageInput").focus();
            }
        }

        async function sendMessage() {
            const message = document.getElementById("messageInput").value.trim();
            if (userName && message) {
                try {
                    await connection.invoke("SendMessage", userName, message, conversationId);
                    document.getElementById("messageInput").value = '';
                } catch (err) {
                    console.error("SendMessage failed: ", err);
                }
            }
        }

        // Listen for Enter key on message input to send message
        document.getElementById("messageInput").addEventListener("keypress", function (event) {
            if (event.key === "Enter") {
                event.preventDefault();
                sendMessage();
            }
        });

        start();
    </script>
}
