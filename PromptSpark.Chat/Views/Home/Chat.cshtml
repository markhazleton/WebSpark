@{
    ViewData["Title"] = "PromptSpark.Chat";
}

<div class="chat-container">
    <div class="card shadow-sm">
        <header class="card-header bg-primary text-white text-center">
            <h2 class="mb-0">PromptSpark Chat</h2>
        </header>
        <div class="card-body">
            <div id="userForm" class="mb-4">
                <label for="userInput" class="form-label">Enter your name to join the chat:</label>
                <input type="text" id="userInput" class="form-control" placeholder="Your name" aria-label="User name input" />
                <button class="btn btn-primary mt-2" onclick="showWorkflowSelection()">Next</button>
            </div>
            <div id="workflowForm" class="mb-4" style="display: none;">
                <label for="workflowSelect" class="form-label">Select a workflow:</label>
                <select id="workflowSelect" class="form-select" aria-label="Workflow selection">
                    <!-- Workflow options will be populated here by JavaScript -->
                </select>
                <button class="btn btn-primary mt-2" onclick="joinChat()">Join Chat</button>
            </div>
            <div id="chatWindow" style="display: none;">
                <div id="connectionStatus" class="text-muted mb-2">Connecting...</div>
                <ul id="messagesList" class="list-unstyled mb-3 p-3 border rounded bg-light overflow-auto" style="height: 70vh; max-height: 70vh;" aria-live="polite">
                </ul>
                <div id="optionsContainer" class="d-flex flex-wrap gap-2 mb-3" style="display: none;"></div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        /* Chat container styling */
        .chat-container {
            position: fixed;
            bottom: 10px;
            right: 10px;
            width: 550px; /* Adjust width as needed */
            max-width: 90vw; /* Ensure it doesn't exceed viewport width */
            height: 90vh; /* Take up 90% of the viewport height */
            z-index: 1000; /* Stay on top of other elements */
            overflow: hidden;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            background-color: white;
        }

            /* Adjust card body height to fit container */
            .chat-container .card-body {
                height: calc(100% - 60px); /* Subtract header height */
                overflow-y: auto;
            }

        /* Overflow scrolling in messages list */
        #messagesList {
            height: 65vh; /* Adjust to fit chat messages comfortably */
            overflow-y: auto;
            overflow-x: hidden;
        }
    </style>
}
@section HeadScripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.9/signalr.min.js" defer></script>
    <script src="https://unpkg.com/adaptivecards@2.11.0/dist/adaptivecards.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/marked/4.0.12/marked.min.js" defer></script>
}

@section Scripts {
    <script>
        let connection;
        let userName = "";
        let selectedWorkflow = "";
        let conversationId = localStorage.getItem("conversationId") || generateConversationId();
        let inWorkflow = JSON.parse(localStorage.getItem("inWorkflow")) || false;
        let retryCount = 0;
        let currentMessageContainer = null;
        let lastMessageUser = null;
        let activeMessageId = null;

        function generateConversationId() {
            return Math.random().toString(36).substring(2, 15);
        }

        async function start() {
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub")
                .configureLogging(signalR.LogLevel.Information)
                .build();

            try {
                await connection.start();
                console.log("Connected to SignalR hub!");
                retryCount = 0;
                document.getElementById("connectionStatus").style.display = "none";
                connection.on("ReceiveAdaptiveCard", handleReceiveAdaptiveCard);
                connection.on("ReceiveMessage", handleReceiveMessage);
                await loadWorkflows();
            } catch (err) {
                retryCount++;
                console.error("Connection failed: ", err);
                document.getElementById("connectionStatus").textContent = "Reconnecting...";
                if (retryCount < 5) {
                    setTimeout(start, Math.min(5000 * retryCount, 30000));
                } else {
                    document.getElementById("connectionStatus").textContent = "Unable to connect. Please try again later.";
                }
            }
        }

        function showWorkflowSelection() {
            userName = document.getElementById("userInput").value.trim();
            if (userName && userName.length <= 50) {
                document.getElementById("userForm").style.display = "none";
                document.getElementById("workflowForm").style.display = "block";
            } else {
                alert("Please enter a valid name (max 50 characters).");
            }
        }

        async function loadWorkflows() {
            try {
                const response = await fetch('@Url.Action("workflows", "WorkflowAdmin")');
                const workflows = await response.json();
                const workflowSelect = document.getElementById("workflowSelect");

                workflows.forEach(workflow => {
                    const option = document.createElement("option");
                    option.value = workflow;
                    option.textContent = workflow;
                    workflowSelect.appendChild(option);
                });
            } catch (err) {
                console.error("Failed to load workflows:", err);
            }
        }

        async function joinChat() {
            selectedWorkflow = document.getElementById("workflowSelect").value;
            if (!selectedWorkflow) {
                alert("Please select a workflow.");
                return;
            }

            document.getElementById("workflowForm").style.display = "none";
            document.getElementById("chatWindow").style.display = "block";

            await connection.invoke("SetUserName", conversationId, userName, selectedWorkflow);
            startWorkflow();
        }

        async function startWorkflow() {
            try {
                await connection.invoke("SendMessage", conversationId, "");
                inWorkflow = true;
                localStorage.setItem("inWorkflow", JSON.stringify(inWorkflow));
            } catch (err) {
                console.error("Workflow initiation failed: ", err);
            }
        }

        function handleReceiveAdaptiveCard(adaptiveCardJson) {
            const messagesList = document.getElementById("messagesList");

            const adaptiveCard = new AdaptiveCards.AdaptiveCard();
            adaptiveCard.parse(JSON.parse(adaptiveCardJson));
            const renderedCard = adaptiveCard.render();

            const cardContainer = document.createElement("li");
            cardContainer.classList.add("mb-3", "p-3", "bg-white", "shadow-sm", "rounded");
            cardContainer.appendChild(renderedCard);
            messagesList.appendChild(cardContainer);
            messagesList.scrollTop = messagesList.scrollHeight;

            adaptiveCard.onExecuteAction = async function (action) {
                if (action.data && (action.data.option || action.data.userResponse)) {
                    const response = action.data.option || action.data.userResponse;
                    await progressWorkflow(response);
                    renderedCard.querySelectorAll("button, select, input").forEach(element => element.disabled = true);
                    renderedCard.style.opacity = "0.5";
                    renderedCard.style.pointerEvents = "none";
                }
            };
        }

        function handleReceiveMessage(user, messageChunk, messageId) {
            const messagesList = document.getElementById("messagesList");

            if (!currentMessageContainer || lastMessageUser !== user || activeMessageId !== messageId) {
                currentMessageContainer = document.createElement("div");
                currentMessageContainer.classList.add("mb-2", "p-3", "rounded");

                if (user === "PromptSpark") {
                    currentMessageContainer.classList.add("bg-primary", "text-white");
                } else {
                    currentMessageContainer.classList.add("bg-light", "text-dark");
                }

                currentMessageContainer.innerHTML = `<strong>${user}:</strong> <span class="message-content"></span>`;
                messagesList.appendChild(currentMessageContainer);
                lastMessageUser = user;
                activeMessageId = messageId;
            }

            const messageContentSpan = currentMessageContainer.querySelector(".message-content");
            const formattedChunk = typeof marked !== "undefined" ? marked.parseInline(messageChunk) : messageChunk;
            messageContentSpan.innerHTML += formattedChunk;
            messagesList.scrollTop = messagesList.scrollHeight;

            if (messageChunk === "") {
                currentMessageContainer = null;
                lastMessageUser = null;
                activeMessageId = null;
            }
        }

        async function progressWorkflow(response) {
            try {
                await connection.invoke("SendMessage", conversationId, response);
            } catch (err) {
                console.error("SendMessage failed: ", err);
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
            start();
        });
    </script>
}
