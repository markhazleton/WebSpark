@{
}

@section HeadScripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.9/signalr.min.js"></script>
}

<div class="container py-5">
    <div class="card">
        <div class="card-header text-center">
            <h2>PromptSpark Chat</h2>
        </div>
        <div class="card-body">
            <div id="userForm" class="mb-4">
                <label for="userInput" class="form-label">Enter your name to join the chat:</label>
                <input type="text" id="userInput" class="form-control" placeholder="Your name" />
                <button class="btn btn-primary mt-2" onclick="joinChat()">Join Chat</button>
            </div>
            <div id="chatWindow" style="display: none;">
                <ul id="messagesList" class="list-unstyled mb-3 p-3 border rounded bg-white" style="height: 300px; overflow-y: scroll;">
                </ul>
                <div id="optionsContainer" class="d-flex flex-wrap gap-2 mb-3" style="display: none;"></div>
                <div class="input-group">
                    <input type="text" id="messageInput" class="form-control" placeholder="Type your message here..." />
                    <button class="btn btn-primary" onclick="sendMessage()">Send</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.9/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
          .withUrl("/chatHub")
          .configureLogging(signalR.LogLevel.Information)
          .build();

        let userName = "";
        let conversationId = localStorage.getItem("conversationId") || generateConversationId();
        let botMessageElement = null;
        let inWorkflow = false;
        localStorage.setItem("conversationId", conversationId);

        function generateConversationId() {
            return Math.random().toString(36).substring(2, 15);
        }

        async function start() {
            try {
                await connection.start();
                console.log("Connected to SignalR hub!");
            } catch (err) {
                console.error("Connection failed: ", err);
                setTimeout(start, 5000);
            }
        }

        async function startWorkflow() {
            try {
                await connection.invoke("StartWorkflow", conversationId);
                inWorkflow = true;
            } catch (err) {
                console.error("Workflow initiation failed: ", err);
            }
        }

        connection.on("ReceiveMessagePackage", (responsePackage) => {
            const messagesList = document.getElementById("messagesList");
            const optionsContainer = document.getElementById("optionsContainer");

            const questionLi = document.createElement("li");
            questionLi.classList.add("mb-2");
            questionLi.innerHTML = `<strong>PromptSpark:</strong> ${responsePackage.question || "No question provided."}`;
            messagesList.appendChild(questionLi);

            optionsContainer.innerHTML = "";

            if (Array.isArray(responsePackage.options) && responsePackage.options.length > 0) {
                responsePackage.options.forEach(option => {
                    const button = document.createElement("button");
                    button.classList.add("btn", "btn-secondary", "me-2");
                    button.textContent = option.response;
                    button.onclick = () => progressWorkflow(option.response);
                    optionsContainer.appendChild(button);
                });
                optionsContainer.style.display = "flex";
            } else {
                optionsContainer.style.display = "none";
            }

            messagesList.scrollTop = messagesList.scrollHeight;
        });

        connection.on("ReceiveMessage", (user, message) => {
            const messagesList = document.getElementById("messagesList");
            const optionsContainer = document.getElementById("optionsContainer");

            optionsContainer.style.display = "none";

            if (user === "PromptSpark") {
                if (!botMessageElement) {
                    botMessageElement = document.createElement("li");
                    botMessageElement.classList.add("mb-2");
                    botMessageElement.setAttribute("data-user", "PromptSpark");
                    botMessageElement.innerHTML = `<strong>${user}:</strong> <span class="bot-message-content"></span>`;
                    messagesList.appendChild(botMessageElement);
                }
                botMessageElement.querySelector(".bot-message-content").textContent += message + " ";
            } else {
                botMessageElement = null;
                const li = document.createElement("li");
                li.classList.add("mb-2");
                li.innerHTML = `<strong>${user}:</strong> ${message}`;
                messagesList.appendChild(li);
            }
            messagesList.scrollTop = messagesList.scrollHeight;
        });

        async function joinChat() {
            userName = document.getElementById("userInput").value.trim();
            if (userName) {
                document.getElementById("userForm").style.display = "none";
                document.getElementById("chatWindow").style.display = "block";
                document.getElementById("messageInput").focus();
                // Set the user name on the server
                await connection.invoke("SetUserName", conversationId, userName);
                // Start the workflow
                startWorkflow();
            }
        }


        async function progressWorkflow(response) {
            try {
                await connection.invoke("ProgressWorkflow", conversationId, response);
            } catch (err) {
                console.error("ProgressWorkflow failed: ", err);
            }
        }

        async function sendMessage() {
            const message = document.getElementById("messageInput").value.trim();
            if (userName && message) {
                try {
                    if (inWorkflow) {
                        await progressWorkflow(message);
                    } else {
                        await connection.invoke("SendMessage", userName, message, conversationId);
                    }
                    document.getElementById("messageInput").value = '';
                } catch (err) {
                    console.error("SendMessage failed: ", err);
                }
            }
        }

        document.getElementById("messageInput").addEventListener("keypress", function (event) {
            if (event.key === "Enter") {
                event.preventDefault();
                sendMessage();
            }
        });

        start();
    </script>
}
