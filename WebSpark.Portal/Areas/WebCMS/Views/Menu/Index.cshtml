@model IEnumerable<WebSpark.Core.Models.MenuModel>

@{
    ViewData["Title"] = "Menu Management";
    var domainNames = Model.Select(m => m.DomainName).Distinct().OrderBy(d => d).ToList();
}

<div class="container-fluid py-4">
    <div class="row align-items-center mb-4">
        <div class="col-md-6">
            <h1 class="h2 mb-0">
                <i class="bi bi-list-nested text-primary me-2"></i> Menu Management
            </h1>
        </div>
        <div class="col-md-6 text-md-end mt-3 mt-md-0">
            <a asp-action="Create" class="btn btn-primary">
                <i class="bi bi-plus-circle me-1"></i> Create New Menu Item
            </a>
        </div>
    </div>

    <div class="card shadow-sm mb-4">
        <div class="card-header bg-light">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <h5 class="mb-0">Menu Items</h5>
                </div>
                <div class="col-md-6">
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="bi bi-filter"></i>
                        </span>
                        <select id="domainFilter" class="form-select">
                            <option value="">All Domains</option>
                            @foreach (var domain in domainNames)
                            {
                                <option value="@domain">@domain</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover" id="menuTable">
                    <thead class="table-light">
                        <tr>
                            <th>@Html.DisplayNameFor(model => model.Title)</th>
                            <th>@Html.DisplayNameFor(model => model.DomainName)</th>
                            <th>@Html.DisplayNameFor(model => model.DisplayOrder)</th>
                            <th>@Html.DisplayNameFor(model => model.ParentTitle)</th>
                            <th>@Html.DisplayNameFor(model => model.Url)</th>
                            <th class="text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr data-domain="@item.DomainName">
                                <td class="align-middle">
                                    <div class="d-flex align-items-center">
                                        @if (!string.IsNullOrEmpty(item.Icon))
                                        {
                                            <i class="bi bi-@item.Icon me-2 text-primary"></i>
                                        }
                                        <span>@item.Title</span>
                                    </div>
                                </td>
                                <td class="align-middle">
                                    <span class="badge bg-light text-dark">@item.DomainName</span>
                                </td>
                                <td class="align-middle">@item.DisplayOrder</td>
                                <td class="align-middle">@(item.ParentTitle ?? "-")</td>
                                <td class="align-middle text-truncate" style="max-width: 200px;">
                                    @if (!string.IsNullOrEmpty(item.Url))
                                    {
                                        <code class="small">@item.Url</code>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td class="align-middle text-center">
                                    <div class="btn-group">
                                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-outline-primary">
                                            <i class="bi bi-pencil-square"></i>
                                        </a>
                                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-outline-info">
                                            <i class="bi bi-info-circle"></i>
                                        </a>
                                        <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-outline-danger">
                                            <i class="bi bi-trash"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section PageScripts {
    <script>
        $(document).ready(function () {
            // Initialize DataTable with responsive features
            var table = $('#menuTable').DataTable({
                responsive: true,
                dom: '<"row mb-3"<"col-md-6"l><"col-md-6"f>>rt<"row"<"col-md-6"i><"col-md-6"p>>',
                language: {
                    search: "_INPUT_",
                    searchPlaceholder: "Search menu items..."
                },
                order: [[2, 'asc'], [0, 'asc']], // Sort by DisplayOrder then Title
                columnDefs: [
                    { orderable: false, targets: 5 } // Disable sorting on Actions column
                ]
            });

            // Custom filter for domains
            $('#domainFilter').on('change', function () {
                let selectedDomain = $(this).val();

                if (selectedDomain) {
                    table.column(1).search(selectedDomain).draw();
                } else {
                    table.column(1).search('').draw();
                }
            });

            // Responsive breakpoints handling
            $(window).on('resize', function() {
                if ($(window).width() < 768) {
                    // Hide less important columns on mobile
                    table.column(2).visible(false);
                    table.column(4).visible(false);
                } else {
                    table.column(2).visible(true);
                    table.column(4).visible(true);
                }
            }).trigger('resize');
        });
    </script>
}