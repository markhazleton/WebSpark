@using System.Globalization
@model IEnumerable<DefinitionTypeDto>

@{
    TextInfo textInfo = CultureInfo.InvariantCulture.TextInfo;

    ViewData["Title"] = "Core Sparks - PromptSpark";
    ViewData["Description"] = "A Spark in Prompt Spark defines the core behavior and output expectations for Large Language Models, detailing requirements and guidelines for evaluating different implementations or variants.";
    ViewData["Keywords"] = "Sparks, Prompt Spark, Large Language Models, Core Sparks";
}

@section Styles 
{
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
        }

        .card-header a {
            font-weight: bold;
            color: #fff;
            text-decoration: none;
        }

            .card-header a:hover {
                text-decoration: underline;
            }

        .card {
            border-radius: 15px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .card-body {
            border-top: 1px solid #f1f1f1;
        }

        .card-footer {
            background-color: #f9f9f9;
        }

        .card-item {
            transition: transform 0.2s, box-shadow 0.2s;
        }

            .card-item:hover {
                transform: translateY(-5px);
                box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
            }

        .custom-blockquote {
            font-style: italic;
            border-left: 5px solid #007bff;
            padding-left: 15px;
        }

        .nav-pills .nav-link.active {
            background-color: #007bff;
        }

        .card-header {
            background-image: linear-gradient(to right, #007bff, #00c6ff);
        }

        .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
            transition: background-color 0.3s, border-color 0.3s;
        }

            .btn-primary:hover {
                background-color: #0056b3;
                border-color: #004085;
            }
    </style>
}


<div class="container py-5">
    <div class="row mb-4">
        <div class="col-12 text-center">
            <h1>Sparks</h1>
            <blockquote class="blockquote custom-blockquote">
                <p>A Spark in Prompt Spark defines the core behavior and output expectations for Large Language Models, detailing requirements and guidelines for evaluating different implementations or variants.</p>
            </blockquote>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12">
            <nav>
                <ul class="nav nav-pills justify-content-center">
                    <li class="nav-item">
                        <a class="nav-link active nav-link-on-page" href="#" data-filter="all">All</a>
                    </li>
                    @foreach (var outputType in Model.Select(m => m.OutputType).Distinct())
                    {
                        <li class="nav-item">
                            <a class="nav-link nav-link-on-page" href="#" data-filter="@outputType">@outputType</a>
                        </li>
                    }
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button" aria-expanded="false">Sort By</a>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="#" data-sort="asc">Definition Type (A-Z)</a></li>
                            <li><a class="dropdown-item" href="#" data-sort="desc">Definition Type (Z-A)</a></li>
                        </ul>
                    </li>
                </ul>
            </nav>
        </div>
    </div>

    <div class="row" id="cardContainer">
        @foreach (var item in Model)
        {
            var definitionType = textInfo.ToTitleCase(item.DefinitionType.ToLower());

            <div class="col-md-4 mb-4 card-item animate__animated animate__fadeInUp" data-outputtype="@item.OutputType" data-definitiontype="@item.DefinitionType">
                <div class="card h-100">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <a href="@Url.Action("Details", new { id = item.DefinitionType })" class="d-flex align-items-center">
                            <i class="fas fa-link me-2"></i>@definitionType
                        </a>
                        <a href="@Url.Action("Details", new { id = item.DefinitionType })" class="btn btn-sm btn-primary">
                            <i class="fas fa-info-circle"></i> Details
                        </a>
                    </div>
                    <div class="card-body">
                        <p class="card-text">@item.Description</p>
                    </div>
                    <div class="card-footer text-muted">
                        <p class="mb-0">@item.OutputType</p>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const navLinks = document.querySelectorAll('.nav-link-on-page');
            const sortLinks = document.querySelectorAll('.dropdown-item');
            const cardContainer = document.getElementById('cardContainer');

            // Filtering logic
            function filterCards(filter) {
                const cardItems = document.querySelectorAll('.card-item');
                cardItems.forEach(card => {
                    if (filter === 'all' || card.getAttribute('data-outputtype') === filter) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });
            }

            navLinks.forEach(link => {
                link.addEventListener('click', function (event) {
                    event.preventDefault();
                    const filter = event.target.getAttribute('data-filter');

                    navLinks.forEach(link => link.classList.remove('active'));
                    event.target.classList.add('active');

                    filterCards(filter);
                });
            });

            // Sorting logic
            sortLinks.forEach(link => {
                link.addEventListener('click', function (event) {
                    event.preventDefault();
                    const sortOrder = event.target.getAttribute('data-sort');
                    const cardItems = Array.from(document.querySelectorAll('.card-item'));
                    const sortedItems = cardItems.sort((a, b) => {
                        const aType = a.getAttribute('data-definitiontype').toUpperCase();
                        const bType = b.getAttribute('data-definitiontype').toUpperCase();
                        if (sortOrder === 'asc') {
                            return aType < bType ? -1 : aType > bType ? 1 : 0;
                        } else {
                            return aType > bType ? -1 : aType < bType ? 1 : 0;
                        }
                    });
                    cardContainer.innerHTML = '';
                    sortedItems.forEach(item => cardContainer.appendChild(item));
                    // Reset filter to "all" after sorting
                    navLinks.forEach(link => link.classList.remove('active'));
                    document.querySelector('.nav-link[data-filter="all"]').classList.add('active');
                    filterCards('all');
                });
            });
        });
    </script>
}
