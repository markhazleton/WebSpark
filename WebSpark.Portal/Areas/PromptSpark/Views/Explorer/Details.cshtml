@using PromptSpark.Domain.Models
@using System.Globalization
@model DefinitionTypeDto

@{
    // Use safe navigation with ?. and null-coalescing to ensure definitionType is valid.
    var definitionType = Model?.DefinitionType ?? string.Empty;
    var userPrompt = Model?.Prompts?.FirstOrDefault(w => w.UserPromptId == Model?.CurrentUserPromptId);

    // Ensure CultureInfo is properly defined and text transformation is safe.
    TextInfo textInfo = CultureInfo.InvariantCulture.TextInfo;
    definitionType = textInfo.ToTitleCase(definitionType.ToLowerInvariant());

    // Safely handle the user prompt text, ensuring it ends on a full word.
    var userPromptText = string.Empty;
    if (userPrompt?.UserPrompt != null && userPrompt.UserPrompt.Length > 0)
    {
        // Truncate at 30 characters or less to the nearest space, ensuring we don't cut off in the middle of a word.
        if (userPrompt.UserPrompt.Length > 30)
        {
            // Find the last space within the first 30 characters
            var truncatedText = userPrompt.UserPrompt.Substring(0, 30);
            var lastSpaceIndex = truncatedText.LastIndexOf(' ');

            // Use the last space index if found; otherwise, use the full 30 characters.
            userPromptText = lastSpaceIndex > 0 ? truncatedText.Substring(0, lastSpaceIndex) : truncatedText;
        }
        else
        {
            userPromptText = userPrompt.UserPrompt;
        }
    }
    // HTML encode any user-provided text to prevent XSS vulnerabilities.
    var encodedDefinitionType = System.Text.Encodings.Web.HtmlEncoder.Default.Encode(definitionType);
    var encodedUserPromptText = System.Text.Encodings.Web.HtmlEncoder.Default.Encode(userPromptText);
    var encodedDescription = System.Text.Encodings.Web.HtmlEncoder.Default.Encode(Model?.Description ?? string.Empty);

    // Set ViewData with encoded and safe values.
    ViewData["Title"] = $"Core Spark - {encodedDefinitionType} - {encodedUserPromptText}";
    ViewData["Description"] = $"{encodedDefinitionType}:{encodedDescription} - {encodedUserPromptText}";
    ViewData["Keywords"] = "Sparks, Prompt Spark, Large Language Models, Core Sparks";
}

<span class="badge rounded-pill bg-primary">Core Spark (@definitionType)</span>
<div class="row">
    <div class="col-8">
        <h1>@definitionType</h1>
        <p>@Model.Description</p>
    </div>
    <div class="col-4">
        <a class="btn btn-secondary" asp-action="Index">Back to Core Sparks</a>
    </div>
</div>

@if (Model.CurrentUserPromptId == 0)
{
    <span class="badge rounded-pill bg-primary">User Prompts for the Core Spark (@definitionType)</span>
    <ul class="list-group">
        @foreach (var item in Model.Prompts)
        {
            var displayText = item.UserPrompt.Length > 120 ? item.UserPrompt.Substring(0, 120) + "..." : item.UserPrompt;

            <li class="list-group-item">
                <a href="/PromptSpark/explorer/details/@definitionType?UserPromptId=@item.UserPromptId" class="text-decoration-none">
                    @displayText
                </a>
            </li>
        }
    </ul>
}
else
{
    @await Html.PartialAsync("_UserPromptDetail", userPrompt)
}


@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function(tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl, { html: true })
            });
            var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
            var popoverList = popoverTriggerList.map(function(popoverTriggerEl) {
                return new bootstrap.Popover(popoverTriggerEl);
            });
        });
    </script>
}
