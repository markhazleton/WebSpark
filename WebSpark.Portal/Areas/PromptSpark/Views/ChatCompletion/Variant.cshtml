@model DefinitionDto
@{
    var encodedName = System.Text.Encodings.Web.HtmlEncoder.Default.Encode(Model.Name);
    var encodedDescription = System.Text.Encodings.Web.HtmlEncoder.Default.Encode(Model.Description);
    ViewData["Title"] = $"Interactive Chat with AI - {encodedName}";
    ViewData["Description"] = $"Experience an interactive chat interface with {encodedName} powered by AI. Discover how PromptSpark enhances communication with advanced SignalR integration and seamless user interactions.";
    ViewData["Keywords"] = $"PromptSpark, AI Chat, SignalR, Interactive Chat, Chat Completions, .Net 9, Bootstrap 5, AI Communication,{encodedName}";
}

<div class="container-fluid vh-100 d-flex flex-column bg-dark text-light p-0">
    <div class="card bg-secondary text-light w-100 h-100" style="max-width: 1200px; max-height: 60vh;">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0"><i class="bi bi-chat-dots-fill me-2"></i> Chat with @Model.Name</h5>
        </div>

        <!-- Chat messages container -->
        <div class="card-body overflow-auto p-3 flex-grow-1" id="messagesContainer" style="height: 60vh;">
            <!-- Messages will be appended here -->
        </div>

        <!-- Input section -->
        <div class="card-footer p-2 bg-dark">
            <div class="input-group">
                <input type="text" id="messageInput" class="form-control bg-secondary text-light border-0" placeholder="Type your message...">
                <button class="btn btn-success" id="sendButton">
                    <i class="bi bi-send"></i>
                </button>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.7/signalr.min.js"></script>
    <script>
        // Save the AI sender name from the model
        const aiSenderName = "@Model.Name";

        // Helper function to append a message
        // - sender: the sender label (aiSenderName or "You")
        // - message: the message content
        // - alignment: "text-start" (left) or "text-end" (right)
        function appendMessage(sender, message, alignment) {
            const messagesContainer = document.getElementById('messagesContainer');
            let lastMsgContainer = messagesContainer.lastElementChild;

            // Check if the last container exists and is from the same sender.
            if (lastMsgContainer && lastMsgContainer.getAttribute('data-sender') === sender) {
                // Append a new message element to the existing container.
                const msgDiv = document.createElement('div');
                msgDiv.className = sender === "You" ? 'userInput d-inline-block mt-1' : 'systemResponse d-inline-block mt-1';
                if (sender !== "You") {
                    msgDiv.innerHTML = message;
                } else {
                    msgDiv.textContent = message;
                }
                lastMsgContainer.appendChild(msgDiv);
            } else {
                // Create a new container with a sender header.
                const msgContainer = document.createElement('div');
                msgContainer.classList.add('message-container', alignment, 'mb-2');
                msgContainer.setAttribute('data-sender', sender);

                // Create a Bootstrap button as the sender label.
                const senderButton = document.createElement('button');
                senderButton.className = 'btn btn-sm btn-outline-primary me-2';
                senderButton.textContent = sender;
                msgContainer.appendChild(senderButton);

                // Create the message content element.
                const msgDiv = document.createElement('div');
                msgDiv.className = sender === "You" ? 'userInput d-inline-block' : 'systemResponse d-inline-block';
                if (sender !== "You") {
                    msgDiv.innerHTML = message;
                } else {
                    msgDiv.textContent = message;
                }
                msgContainer.appendChild(msgDiv);

                messagesContainer.appendChild(msgContainer);
            }
            // Scroll to the bottom.
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        // Establish the SignalR connection.
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        // Handle incoming messages.
        connection.on("ReceiveMessage", (user, message, conversationId) => {
            // Determine sender and alignment.
            const sender = (user === "System") ? aiSenderName : "You";
            const alignment = (user === "System") ? 'text-start' : 'text-end';
            appendMessage(sender, message, alignment);
        });

        // Start the SignalR connection.
        connection.start().catch(err => console.error(err.toString()));

        // Function to send a message.
        function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();
            if (message === "") return;

            // Append the user message (right aligned).
            appendMessage("You", message, 'text-end');

            // Gather conversation history (only user messages) from the messages container.
            const allUserMessages = [];
            const userMessageDivs = document.getElementsByClassName('userInput');
            for (let i = 0; i < userMessageDivs.length; i++) {
                allUserMessages.push(userMessageDivs[i].textContent);
            }

            // Clear the input field.
            input.value = '';

            // Prepare form data.
            const formData = new FormData();
            formData.append('message', message);
            formData.append('conversationHistory', JSON.stringify(allUserMessages));

            // Send the message to the server.
            fetch('/PromptSpark/ChatCompletion/SendMessage', {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => console.log('Server response:', data))
            .catch(err => console.error('Fetch error:', err.toString()));
        }

        // Event listeners for the send button and Enter key.
        document.getElementById('sendButton').addEventListener('click', sendMessage);
        document.getElementById('messageInput').addEventListener('keydown', (event) => {
            if (event.key === 'Enter') {
                sendMessage();
            }
        });
    </script>
}
