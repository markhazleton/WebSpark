@model DefinitionDto
@{

}

@section Styles
{
    <style>
        .messagesContainer {
            display: flex;
            flex-direction: column;
            height: 60vh;
            overflow-y: scroll;
            border: 1px solid black;
            padding: 10px;
        }

        .userInput {
            background-color: lightblue;
            padding: 5px;
            margin: 5px;
            border-radius: 5px;
            width: 90%;
        }

        .systemResponse {
            background-color: lightgreen;
            padding: 5px;
            margin: 5px;
            border-radius: 5px;
            width: 90%;
        }
    </style>
}

<div class="card">
    <div class="card-header bg-primary-subtle">
        <h2>@Model.Name</h2>
    </div>
    <div class="card-body">
        <div class="messagesContainer" id="messagesContainer"></div>
    </div>
    <div class="card-footer">
        <div class="card-footer bg-info-subtle">
            <input type="text" id="messageInput" style="width:90%;" placeholder="Message" />
            <button class="btn btn-success" id="sendButton">Send</button>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.7/signalr.min.js"></script>

    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        connection.on("ReceiveMessage", (user, message) => {
            const messagesList = document.getElementById('receiveMessage');
            messagesList.innerHTML += `${message}`;

            const messagesContainer = document.getElementById('messagesContainer');
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        });

        connection.start().catch(err => console.error(err.toString()));

        function sendMessage() {
            const message = document.getElementById('messageInput').value;
            if (message) {
                // Create a new div with class "userInput" and add the message to it
                const userMessageDiv = document.createElement('div');
                userMessageDiv.className = 'userInput';
                userMessageDiv.textContent = message;

                // Append the new div to the messagesList
                const messagesList = document.getElementById('messagesContainer');
                messagesList.appendChild(userMessageDiv);

                // Collect all the messages in the message container
                const allMessages = [];
                const messageDivs = messagesList.getElementsByTagName('div');
                for (let i = 0; i < messageDivs.length; i++) {
                    allMessages.push(messageDivs[i].textContent);
                }

                // Clear the messageInput text box
                document.getElementById('messageInput').value = '';

                // Remove the ID receiveMessage from the existing div
                const existingReceiveMessage = document.getElementById('receiveMessage');
                if (existingReceiveMessage) {
                    existingReceiveMessage.removeAttribute('id');
                }
                // Create a new receiveMessage div and append it to messagesContainer
                const newReceiveMessageDiv = document.createElement('div');
                newReceiveMessageDiv.id = 'receiveMessage';
                newReceiveMessageDiv.className = 'systemResponse';
                messagesList.appendChild(newReceiveMessageDiv);

                // Send the message and the conversation history to the server
                const formData = new FormData();
                formData.append('message', message);
                formData.append('conversationHistory', JSON.stringify(allMessages));
                fetch('/OpenAI/ChatCompletion/SendMessage', {
                    method: 'POST',
                    body: formData
                }).then(response => response.json())
                    .then(data => console.log(data))
                    .catch(err => console.error(err.toString()));
            }
        }

        document.getElementById('sendButton').addEventListener('click', sendMessage);

        document.getElementById('messageInput').addEventListener('keydown', (event) => {
            if (event.key === 'Enter') {
                sendMessage();
            }
        });
    </script>
}
