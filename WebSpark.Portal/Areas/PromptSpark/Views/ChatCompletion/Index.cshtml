@model DefinitionDto
@{
    var encodedName = System.Text.Encodings.Web.HtmlEncoder.Default.Encode(Model.Name);
    var encodedDescription = System.Text.Encodings.Web.HtmlEncoder.Default.Encode(Model.Description);
    ViewData["Title"] = $"Interactive Chat with AI - {encodedName}";
    ViewData["Description"] = $"Experience an interactive chat interface with {encodedName} powered by AI. Discover how PromptSpark enhances communication with advanced SignalR integration and seamless user interactions.";
    ViewData["Keywords"] = $"PromptSpark, AI Chat, SignalR, Interactive Chat, MVC, .NET 8, Bootstrap 5, AI Communication,{encodedName}";
}

@section Styles
{
    <style>
        .messagesContainer {
            display: flex;
            flex-direction: column;
            height: 60vh;
            overflow-y: scroll;
            border: 1px solid black;
            padding: 10px;
        }

        .userInput {
            background-color: lightblue;
            padding: 5px;
            margin: 5px;
            border-radius: 5px;
            width: 90%;
        }

        .systemResponse {
            background-color: lightgreen;
            padding: 5px;
            margin: 5px;
            border-radius: 5px;
            width: 90%;
        }
    </style>
}

<div class="card">
    <div class="card-header bg-primary-subtle">
        <h2>@Model.Name - AI-Powered Chat Interface</h2>
        <p class="text-muted">Engage with our advanced AI chat system, utilizing the latest in .NET MVC and SignalR technology for real-time communication.</p>
    </div>
    <div class="card-body">
        <div class="messagesContainer" id="messagesContainer"></div>
    </div>
    <div class="card-footer bg-info-subtle">
        <input type="text" id="messageInput" class="form-control mb-2" placeholder="Type your message here..." />
        <button class="btn btn-success" id="sendButton">
            <i class="bi bi-send"></i> Send
        </button>
    </div>
</div>

@section scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.7/signalr.min.js"></script>

    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        connection.on("ReceiveMessage", (user, message) => {
            const messagesList = document.getElementById('receiveMessage');
            messagesList.innerHTML += `${message}`;

            const messagesContainer = document.getElementById('messagesContainer');
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        });

        connection.start().catch(err => console.error(err.toString()));

        function sendMessage() {
            const message = document.getElementById('messageInput').value;
            if (message) {
                const userMessageDiv = document.createElement('div');
                userMessageDiv.className = 'userInput';
                userMessageDiv.textContent = message;

                const messagesList = document.getElementById('messagesContainer');
                messagesList.appendChild(userMessageDiv);

                const allMessages = [];
                const messageDivs = messagesList.getElementsByTagName('div');
                for (let i = 0; i < messageDivs.length; i++) {
                    allMessages.push(messageDivs[i].textContent);
                }

                document.getElementById('messageInput').value = '';

                const existingReceiveMessage = document.getElementById('receiveMessage');
                if (existingReceiveMessage) {
                    existingReceiveMessage.removeAttribute('id');
                }
                const newReceiveMessageDiv = document.createElement('div');
                newReceiveMessageDiv.id = 'receiveMessage';
                newReceiveMessageDiv.className = 'systemResponse';
                messagesList.appendChild(newReceiveMessageDiv);

                const formData = new FormData();
                formData.append('message', message);
                formData.append('conversationHistory', JSON.stringify(allMessages));
                fetch('/PromptSpark/ChatCompletion/SendMessage', {
                    method: 'POST',
                    body: formData
                }).then(response => response.json())
                    .then(data => console.log(data))
                    .catch(err => console.error(err.toString()));
            }
        }

        document.getElementById('sendButton').addEventListener('click', sendMessage);

        document.getElementById('messageInput').addEventListener('keydown', (event) => {
            if (event.key === 'Enter') {
                sendMessage();
            }
        });
    </script>
}
