@model DefinitionDto
@{
    var encodedName = System.Text.Encodings.Web.HtmlEncoder.Default.Encode(Model.Name);
    ViewData["Title"] = $"Chat with {encodedName}";
    ViewData["Description"] = $"Interactive AI chat with {encodedName}";
}

<div class="chat-container">
    <!-- Header with AI info and controls -->
    <div class="chat-header">
        <div class="ai-avatar">
            <div class="avatar-circle">
                <i class="bi bi-robot"></i>
            </div>
            <div class="ai-info">
                <h5 class="ai-name">@Model.Name</h5>
                <span class="ai-status online">Online</span>
            </div>
        </div>
        <div class="chat-controls">
            <button class="btn btn-outline-secondary btn-sm" id="exportChatBtn" title="Export conversation">
                <i class="bi bi-download"></i>
            </button>
            <button class="btn btn-outline-secondary btn-sm" id="settingsBtn" title="Chat settings">
                <i class="bi bi-gear"></i>
            </button>
            <button class="btn btn-outline-danger btn-sm" id="clearChatBtn" title="Clear conversation">
                <i class="bi bi-trash"></i>
            </button>
        </div>
    </div>

    <!-- Messages Area -->
    <div class="chat-messages" id="chatMessages">
        <div class="welcome-card">
            <div class="welcome-content">
                <div class="ai-greeting">
                    <div class="avatar-circle small">
                        <i class="bi bi-robot"></i>
                    </div>
                    <div class="greeting-text">
                        <h6>Hello! I'm @Model.Name</h6>
                        <p>@Model.Description</p>
                        <div class="quick-actions">
                            <button class="quick-action" data-message="Tell me about yourself">About you</button>
                            <button class="quick-action" data-message="What can you help me with?">How can you
                                help?</button>
                            <button class="quick-action" data-message="What are your capabilities?">Your
                                capabilities</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Typing Indicator -->
    <div class="typing-indicator" id="typingIndicator" style="display: none;">
        <div class="typing-bubble">
            <div class="typing-dots">
                <span></span>
                <span></span>
                <span></span>
            </div>
        </div>
    </div>

    <!-- Input Area -->
    <div class="chat-input-area">
        <div class="input-container">
            <button class="btn btn-ghost attachment-btn" title="Attach file" disabled>
                <i class="bi bi-paperclip"></i>
            </button>
            <div class="message-input-wrapper">
                <textarea id="messageInput" class="message-input" placeholder="Type your message..." rows="1"
                    maxlength="2000"></textarea>
                <div class="input-footer">
                    <span class="char-count">0/2000</span>
                    <div class="input-actions">
                        <button class="btn btn-ghost" id="voiceInputBtn" title="Voice input" disabled>
                            <i class="bi bi-mic"></i>
                        </button>
                        <button class="btn btn-primary" id="sendButton" title="Send message">
                            <i class="bi bi-send"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="input-hints">
            <small>Press <kbd>Enter</kbd> to send, <kbd>Shift+Enter</kbd> for new line</small>
        </div>
    </div>
</div>

<!-- Toast Container -->
<div class="toast-container position-fixed bottom-0 end-0 p-3" id="toastContainer"></div>

<!-- Settings Modal -->
<div class="modal fade" id="settingsModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Chat Settings</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="form-check form-switch mb-3">
                    <input class="form-check-input" type="checkbox" id="soundEffects" checked>
                    <label class="form-check-label" for="soundEffects">Sound effects</label>
                </div>
                <div class="form-check form-switch mb-3">
                    <input class="form-check-input" type="checkbox" id="typingIndicator" checked>
                    <label class="form-check-label" for="typingIndicator">Show typing indicator</label>
                </div>
                <div class="mb-3">
                    <label for="fontSize" class="form-label">Font size</label>
                    <input type="range" class="form-range" id="fontSize" min="12" max="20" value="14">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="saveSettings">Save settings</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        :root {
            --primary-color: #0066cc;
            --secondary-color: #6c757d;
            --success-color: #28a745;
            --danger-color: #dc3545;
            --warning-color: #ffc107;
            --light-bg: #f8f9fa;
            --dark-bg: #343a40;
            --border-radius: 16px;
            --shadow-sm: 0 2px 4px rgba(0, 0, 0, 0.1);
            --shadow-md: 0 4px 12px rgba(0, 0, 0, 0.15);
            --transition: all 0.3s ease;
        }

        .chat-container {
            height: 100vh;
            display: flex;
            flex-direction: column;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            position: relative;
        }

        .chat-header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            box-shadow: var(--shadow-sm);
        }

        .ai-avatar {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .avatar-circle {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background: linear-gradient(45deg, var(--primary-color), #0099ff);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.5rem;
            box-shadow: var(--shadow-sm);
        }

        .avatar-circle.small {
            width: 32px;
            height: 32px;
            font-size: 1rem;
        }

        .ai-info h5 {
            margin: 0;
            font-weight: 600;
            color: #333;
        }

        .ai-status {
            font-size: 0.875rem;
            color: var(--success-color);
            font-weight: 500;
        }

        .ai-status::before {
            content: '‚óè';
            margin-right: 0.5rem;
        }

        .chat-controls {
            display: flex;
            gap: 0.5rem;
        }

        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 1rem;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
        }

        .welcome-card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: var(--border-radius);
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: var(--shadow-md);
            text-align: center;
        }

        .ai-greeting {
            display: flex;
            align-items: flex-start;
            gap: 1rem;
            text-align: left;
        }

        .greeting-text h6 {
            margin: 0 0 0.5rem 0;
            font-weight: 600;
            color: #333;
        }

        .greeting-text p {
            margin: 0 0 1rem 0;
            color: #666;
        }

        .quick-actions {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .quick-action {
            background: rgba(var(--primary-color), 0.1);
            border: 1px solid rgba(var(--primary-color), 0.2);
            border-radius: 20px;
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
            color: var(--primary-color);
            cursor: pointer;
            transition: var(--transition);
        }

        .quick-action:hover {
            background: rgba(var(--primary-color), 0.2);
            transform: translateY(-1px);
        }

        .message-bubble {
            max-width: 70%;
            margin-bottom: 1rem;
            animation: messageSlideIn 0.3s ease-out;
        }

        .message-bubble.user {
            margin-left: auto;
        }

        .message-bubble.assistant {
            margin-right: auto;
        }

        .bubble-content {
            background: rgba(255, 255, 255, 0.95);
            border-radius: var(--border-radius);
            padding: 1rem 1.25rem;
            box-shadow: var(--shadow-sm);
            position: relative;
        }

        .message-bubble.user .bubble-content {
            background: linear-gradient(45deg, var(--primary-color), #0099ff);
            color: white;
            margin-left: auto;
        }

        .bubble-header {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 0.5rem;
            font-size: 0.875rem;
            font-weight: 500;
            color: #666;
        }

        .message-bubble.user .bubble-header {
            color: rgba(255, 255, 255, 0.8);
        }

        .bubble-actions {
            margin-top: 0.5rem;
            display: flex;
            gap: 0.5rem;
        }

        .bubble-action {
            background: none;
            border: none;
            color: #666;
            font-size: 0.875rem;
            cursor: pointer;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            transition: var(--transition);
        }

        .bubble-action:hover {
            background: rgba(0, 0, 0, 0.1);
        }

        .message-bubble.user .bubble-action {
            color: rgba(255, 255, 255, 0.8);
        }

        .message-bubble.user .bubble-action:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .typing-indicator {
            display: flex;
            justify-content: flex-start;
            padding: 0 1rem;
        }

        .typing-bubble {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 1rem 1.25rem;
            box-shadow: var(--shadow-sm);
        }

        .typing-dots {
            display: flex;
            gap: 0.25rem;
        }

        .typing-dots span {
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background: #666;
            animation: typingDot 1.5s infinite;
        }

        .typing-dots span:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-dots span:nth-child(3) {
            animation-delay: 0.4s;
        }

        @@keyframes typingDot {

            0%,
            20% {
                transform: scale(1);
                opacity: 1;
            }

            50% {
                transform: scale(1.2);
                opacity: 0.7;
            }

            100% {
                transform: scale(1);
                opacity: 1;
            }
        }

        @@keyframes messageSlideIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .chat-input-area {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 1rem;
            border-top: 1px solid rgba(0, 0, 0, 0.1);
        }

        .input-container {
            display: flex;
            align-items: flex-end;
            gap: 0.5rem;
            background: white;
            border-radius: var(--border-radius);
            padding: 0.75rem;
            box-shadow: var(--shadow-sm);
            border: 2px solid transparent;
            transition: var(--transition);
        }

        .input-container:focus-within {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(var(--primary-color), 0.1);
        }

        .message-input-wrapper {
            flex: 1;
        }

        .message-input {
            width: 100%;
            border: none;
            outline: none;
            resize: none;
            font-size: 1rem;
            line-height: 1.4;
            max-height: 120px;
        }

        .input-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 0.5rem;
        }

        .char-count {
            font-size: 0.75rem;
            color: #666;
        }

        .input-actions {
            display: flex;
            gap: 0.5rem;
        }

        .btn-ghost {
            background: none;
            border: none;
            color: #666;
            padding: 0.5rem;
            border-radius: 8px;
            transition: var(--transition);
        }

        .btn-ghost:hover:not(:disabled) {
            background: rgba(0, 0, 0, 0.1);
            color: var(--primary-color);
        }

        .btn-ghost:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .input-hints {
            text-align: center;
            margin-top: 0.5rem;
        }

        .input-hints small {
            color: rgba(255, 255, 255, 0.8);
        }

        .input-hints kbd {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            padding: 0.125rem 0.25rem;
            border-radius: 4px;
            font-size: 0.75rem;
        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .chat-container {
                height: 100vh;
            }

            .message-bubble {
                max-width: 90%;
            }

            .ai-greeting {
                flex-direction: column;
                text-align: center;
            }

            .quick-actions {
                justify-content: center;
            }
        }

        /* Accessibility */
        @@media (prefers-reduced-motion: reduce) {
            * {
                animation-duration: 0.01ms !important;
                animation-iteration-count: 1 !important;
                transition-duration: 0.01ms !important;
            }
        }

        /* Animation keyframes */
        @@keyframes pulse {

            0%,
            100% {
                opacity: 0.5;
            }

            50% {
                opacity: 1;
            }
        }

        /* Dark mode support */
        @@media (prefers-color-scheme: dark) {

            .chat-header,
            .chat-input-area {
                background: rgba(33, 37, 41, 0.95);
            }

            .welcome-card,
            .bubble-content {
                background: rgba(33, 37, 41, 0.95);
                color: #e9ecef;
            }

            .ai-info h5 {
                color: #e9ecef;
            }
        }
    </style>
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>
    <script>
        // Modern Chat Interface Implementation
        class ModernChatInterface
        {
            constructor()
            {
                this.connection = null;
                this.isConnected = false;
                this.currentConversationId = null;
                this.isTyping = false;
                this.messageQueue = [];

                this.initializeElements();
                this.initializeSignalR();
                this.attachEventListeners();
                this.loadConversationHistory();
            }

            initializeElements()
            {
                this.chatMessages = document.getElementById('chat-messages');
                this.messageInput = document.getElementById('message-input');
                this.sendButton = document.getElementById('send-button');
                this.typingIndicator = document.getElementById('typing-indicator');
                this.connectionStatus = document.getElementById('connection-status');
                this.conversationSelect = document.getElementById('conversation-select');
                this.newConversationBtn = document.getElementById('new-conversation-btn');
                this.clearChatBtn = document.getElementById('clear-chat-btn');
            }

            async initializeSignalR()
            {
                try
                {
                    this.connection = new signalR.HubConnectionBuilder()
                        .withUrl("/chathub")
                        .withAutomaticReconnect({
                            nextRetryDelayInMilliseconds: retryContext =>
                            {
                                if (retryContext.previousRetryCount === 0) return 0;
                                if (retryContext.previousRetryCount === 1) return 2000;
                                if (retryContext.previousRetryCount === 2) return 10000;
                                if (retryContext.previousRetryCount === 3) return 30000;
                                return null; // Stop retrying
                            }
                        })
                        .build();

                    // Connection event handlers
                    this.connection.onclose(error =>
                    {
                        this.isConnected = false;
                        this.updateConnectionStatus('disconnected');
                        if (error)
                        {
                            console.error('Connection closed due to error:', error);
                            this.showNotification('Connection lost. Attempting to reconnect...', 'error');
                        }
                    });

                    this.connection.onreconnecting(error =>
                    {
                        this.isConnected = false;
                        this.updateConnectionStatus('reconnecting');
                        this.showNotification('Reconnecting...', 'warning');
                    });

                    this.connection.onreconnected(connectionId =>
                    {
                        this.isConnected = true;
                        this.updateConnectionStatus('connected');
                        this.showNotification('Reconnected successfully!', 'success');
                    });

                    // Message handlers
                    this.connection.on("ReceiveMessageStream", (chunk) =>
                    {
                        this.handleStreamingMessage(chunk);
                    });

                    this.connection.on("StreamComplete", () =>
                    {
                        this.handleStreamComplete();
                    });

                    this.connection.on("ReceiveError", (error) =>
                    {
                        this.handleError(error);
                    });

                    // Start connection
                    await this.connection.start();
                    this.isConnected = true;
                    this.updateConnectionStatus('connected');
                    this.showNotification('Connected to chat server!', 'success');

                } catch (error)
                {
                    console.error('Failed to initialize SignalR:', error);
                    this.showNotification('Failed to connect to chat server. Please refresh the page.', 'error');
                }
            }

            attachEventListeners()
            {
                // Send button click
                this.sendButton?.addEventListener('click', () => this.sendMessage());

                // Enter key press
                this.messageInput?.addEventListener('keypress', (e) =>
                {
                    if (e.key === 'Enter' && !e.shiftKey)
                    {
                        e.preventDefault();
                        this.sendMessage();
                    }
                });

                // Input events for typing indicator
                this.messageInput?.addEventListener('input', () =>
                {
                    this.autoResizeTextarea();
                    this.handleTyping();
                });

                // Conversation controls
                this.newConversationBtn?.addEventListener('click', () => this.startNewConversation());
                this.clearChatBtn?.addEventListener('click', () => this.clearCurrentChat());
                this.conversationSelect?.addEventListener('change', (e) => this.switchConversation(e.target.value));

                // Auto-scroll on window resize
                window.addEventListener('resize', () =>
                {
                    this.scrollToBottom();
                });
            }

            autoResizeTextarea()
            {
                if (!this.messageInput) return;

                this.messageInput.style.height = 'auto';
                const newHeight = Math.min(this.messageInput.scrollHeight, 120); // Max height 120px
                this.messageInput.style.height = newHeight + 'px';
            }

            handleTyping()
            {
                // Simple typing detection (could be enhanced with debouncing)
                clearTimeout(this.typingTimeout);
                this.typingTimeout = setTimeout(() =>
                {
                    // User stopped typing
                }, 1000);
            }

            async sendMessage()
            {
                const message = this.messageInput?.value.trim();
                if (!message || !this.isConnected) return;

                try
                {
                    // Clear input immediately for better UX
                    this.messageInput.value = '';
                    this.autoResizeTextarea();

                    // Add user message to chat
                    this.addMessageToChat('user', message);

                    // Show typing indicator
                    this.showTypingIndicator();

                    // Send message via SignalR
                    await this.connection.invoke("SendMessage", message, this.currentConversationId);

                } catch (error)
                {
                    console.error('Failed to send message:', error);
                    this.hideTypingIndicator();
                    this.showNotification('Failed to send message. Please try again.', 'error');
                }
            }

            addMessageToChat(sender, content, timestamp = null)
            {
                if (!this.chatMessages) return;

                const messageDiv = document.createElement('div');
                messageDiv.className = `message-bubble ${sender}-message animate__animated animate__fadeInUp`;

                const time = timestamp ? new Date(timestamp) : new Date();
                const timeString = time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

                if (sender === 'user')
                {
                    messageDiv.innerHTML = `
                            <div class="message-content user-content">
                                <div class="message-text">${this.escapeHtml(content)}</div>
                                <div class="message-time">${timeString}</div>
                            </div>
                            <div class="message-avatar user-avatar">
                                <i class="fas fa-user"></i>
                            </div>
                        `;
                } else
                {
                    messageDiv.innerHTML = `
                            <div class="message-avatar ai-avatar">
                                <i class="fas fa-robot"></i>
                            </div>
                            <div class="message-content ai-content">
                                <div class="message-text" id="ai-message-${Date.now()}">${this.escapeHtml(content)}</div>
                                <div class="message-time">${timeString}</div>
                                <div class="message-actions">
                                    <button class="action-btn copy-btn" onclick="chatInterface.copyToClipboard(this)" title="Copy message">
                                        <i class="fas fa-copy"></i>
                                    </button>
                                    <button class="action-btn feedback-btn" onclick="chatInterface.provideFeedback(this, 'thumbs-up')" title="Good response">
                                        <i class="fas fa-thumbs-up"></i>
                                    </button>
                                    <button class="action-btn feedback-btn" onclick="chatInterface.provideFeedback(this, 'thumbs-down')" title="Poor response">
                                        <i class="fas fa-thumbs-down"></i>
                                    </button>
                                </div>
                            </div>
                        `;
                }

                this.chatMessages.appendChild(messageDiv);
                this.scrollToBottom();

                return messageDiv;
            }

            handleStreamingMessage(chunk)
            {
                if (!this.currentStreamingMessage)
                {
                    this.hideTypingIndicator();
                    this.currentStreamingMessage = this.addMessageToChat('ai', '');
                    this.currentStreamingContent = '';
                }

                this.currentStreamingContent += chunk;
                const messageText = this.currentStreamingMessage.querySelector('.message-text');
                if (messageText)
                {
                    messageText.innerHTML = this.formatMessage(this.currentStreamingContent);
                }

                this.scrollToBottom();
            }

            handleStreamComplete()
            {
                this.currentStreamingMessage = null;
                this.currentStreamingContent = '';
                this.hideTypingIndicator();
            }

            handleError(error)
            {
                this.hideTypingIndicator();
                this.showNotification(error || 'An error occurred while processing your message.', 'error');
                console.error('Chat error:', error);
            }

            showTypingIndicator()
            {
                if (this.typingIndicator)
                {
                    this.typingIndicator.style.display = 'flex';
                    this.scrollToBottom();
                }
            }

            hideTypingIndicator()
            {
                if (this.typingIndicator)
                {
                    this.typingIndicator.style.display = 'none';
                }
            }

            updateConnectionStatus(status)
            {
                if (!this.connectionStatus) return;

                const statusMap = {
                    'connected': { text: 'Connected', class: 'status-connected', icon: 'fa-check-circle' },
                    'disconnected': { text: 'Disconnected', class: 'status-disconnected', icon: 'fa-times-circle' },
                    'reconnecting': { text: 'Reconnecting...', class: 'status-reconnecting', icon: 'fa-spinner fa-spin' }
                };

                const statusInfo = statusMap[status] || statusMap['disconnected'];
                this.connectionStatus.className = `connection-status ${statusInfo.class}`;
                this.connectionStatus.innerHTML = `
                        <i class="fas ${statusInfo.icon}"></i>
                        <span>${statusInfo.text}</span>
                    `;
            }

            showNotification(message, type = 'info')
            {
                // Create notification element
                const notification = document.createElement('div');
                notification.className = `notification notification-${type} animate__animated animate__fadeInRight`;
                notification.innerHTML = `
                        <div class="notification-content">
                            <i class="fas ${this.getNotificationIcon(type)}"></i>
                            <span>${this.escapeHtml(message)}</span>
                        </div>
                        <button class="notification-close" onclick="this.parentElement.remove()">
                            <i class="fas fa-times"></i>
                        </button>
                    `;

                // Add to page
                document.body.appendChild(notification);

                // Auto remove after 5 seconds
                setTimeout(() =>
                {
                    if (notification.parentElement)
                    {
                        notification.classList.add('animate__fadeOutRight');
                        setTimeout(() => notification.remove(), 500);
                    }
                }, 5000);
            }

            getNotificationIcon(type)
            {
                const icons = {
                    'success': 'fa-check-circle',
                    'error': 'fa-exclamation-circle',
                    'warning': 'fa-exclamation-triangle',
                    'info': 'fa-info-circle'
                };
                return icons[type] || icons['info'];
            }

            scrollToBottom()
            {
                if (this.chatMessages)
                {
                    this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
                }
            }

            formatMessage(content)
            {
                // Enhanced message formatting
                return content
                    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') // Bold
                    .replace(/\*(.*?)\*/g, '<em>$1</em>') // Italic
                    .replace(/`(.*?)`/g, '<code>$1</code>') // Inline code
                    .replace(/\n/g, '<br>') // Line breaks
                    .replace(/(https?:\/\/[^\s]+)/g, '<a href="$1" target="_blank" rel="noopener">$1</a>'); // Links
            }

            escapeHtml(unsafe)
            {
                return unsafe
                    .replace(/&/g, "&amp;")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/"/g, "&quot;")
                    .replace(/'/g, "&#039;");
            }

            // Utility functions for UI interactions
            async copyToClipboard(button)
            {
                const messageText = button.closest('.message-content').querySelector('.message-text').innerText;

                try
                {
                    await navigator.clipboard.writeText(messageText);
                    const originalIcon = button.innerHTML;
                    button.innerHTML = '<i class="fas fa-check"></i>';
                    button.style.color = '#28a745';

                    setTimeout(() =>
                    {
                        button.innerHTML = originalIcon;
                        button.style.color = '';
                    }, 2000);

                    this.showNotification('Message copied to clipboard!', 'success');
                } catch (error)
                {
                    this.showNotification('Failed to copy message', 'error');
                }
            }

            provideFeedback(button, type)
            {
                // Visual feedback
                const allFeedbackBtns = button.closest('.message-actions').querySelectorAll('.feedback-btn');
                allFeedbackBtns.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');

                // Could send feedback to server here
                this.showNotification(`Thank you for your feedback!`, 'success');
            }

            startNewConversation()
            {
                this.currentConversationId = null;
                this.chatMessages.innerHTML = '';
                this.showNotification('Started new conversation', 'info');
            }

            clearCurrentChat()
            {
                if (confirm('Are you sure you want to clear the current chat?'))
                {
                    this.chatMessages.innerHTML = '';
                    this.showNotification('Chat cleared', 'info');
                }
            }

            switchConversation(conversationId)
            {
                // Implementation for switching between conversations
                this.currentConversationId = conversationId;
                // Load conversation history here
            }

            loadConversationHistory()
            {
                // Placeholder for loading conversation history
                // This would typically make an AJAX call to load previous messages
            }
        }

        // Initialize the modern chat interface
        let chatInterface;

        document.addEventListener('DOMContentLoaded', function ()
        {
            chatInterface = new ModernChatInterface();
        });

        // Handle page unload
        window.addEventListener('beforeunload', function ()
        {
            if (chatInterface && chatInterface.connection)
            {
                chatInterface.connection.stop();
            }
        });

        // Add enhanced styles for notifications and features
        const enhancedStyles = `
                .notification {
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    z-index: 1050;
                    background: white;
                    border-radius: 12px;
                    box-shadow: 0 8px 32px rgba(0,0,0,0.12);
                    padding: 16px 20px;
                    margin-bottom: 10px;
                    min-width: 300px;
                    border-left: 4px solid;
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                }

                .notification-success { border-left-color: #28a745; }
                .notification-error { border-left-color: #dc3545; }
                .notification-warning { border-left-color: #ffc107; }
                .notification-info { border-left-color: #007bff; }

                .notification-content {
                    display: flex;
                    align-items: center;
                    gap: 10px;
                }

                .notification-close {
                    background: none;
                    border: none;
                    color: #6c757d;
                    cursor: pointer;
                    padding: 4px;
                    border-radius: 4px;
                    transition: all 0.2s ease;
                }

                .notification-close:hover {
                    background: #f8f9fa;
                    color: #495057;
                }

                .connection-status {
                    display: flex;
                    align-items: center;
                    gap: 6px;
                    font-size: 0.875rem;
                    font-weight: 500;
                    padding: 4px 8px;
                    border-radius: 6px;
                    transition: all 0.3s ease;
                }

                .status-connected {
                    color: #28a745;
                    background: rgba(40, 167, 69, 0.1);
                }

                .status-disconnected {
                    color: #dc3545;
                    background: rgba(220, 53, 69, 0.1);
                }

                .status-reconnecting {
                    color: #ffc107;
                    background: rgba(255, 193, 7, 0.1);
                }

                .message-actions {
                    margin-top: 8px;
                    display: flex;
                    gap: 6px;
                    opacity: 0;
                    transition: opacity 0.2s ease;
                }

                .message-bubble:hover .message-actions {
                    opacity: 1;
                }

                .action-btn {
                    background: none;
                    border: none;
                    color: #6c757d;
                    cursor: pointer;
                    padding: 4px 6px;
                    border-radius: 4px;
                    font-size: 0.875rem;
                    transition: all 0.2s ease;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }

                .action-btn:hover {
                    background: #f8f9fa;
                    color: #495057;
                }

                .action-btn.active {
                    color: #007bff;
                    background: rgba(0, 123, 255, 0.1);
                }

                #message-input {
                    resize: none;
                    min-height: 44px;
                    max-height: 120px;
                }

                .typing-indicator .dot {
                    animation: pulse 1.5s infinite;
                }

                .typing-indicator .dot:nth-child(2) {
                    animation-delay: 0.2s;
                }

                .typing-indicator .dot:nth-child(3) {
                    animation-delay: 0.4s;
                }
            `;

        // Add enhanced styles to the document
        const styleSheet = document.createElement('style');
        styleSheet.textContent = enhancedStyles;
        document.head.appendChild(styleSheet);
    </script>
}
