@model List<JShowVM>
@{
    ViewData["Title"] = "JShowVM - Interactive Trivia Experience Powered by GPT";
    ViewData["Description"] = "Learn how the JShowVM Controller and JShowService utilize the J-Show Builder GPT to create a dynamic trivia experience. Explore the JSON-powered game with unique themes and questions.";
    ViewData["Keywords"] = "JShowVM, trivia, interactive show, J-Show Builder GPT, JSON, ASP.NET Core";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <h1 class="display-4 text-center">
                <i class="bi bi-controller"></i> Welcome to the JShow Trivia Experience
            </h1>
            <p class="lead text-center">
                Discover a unique and interactive trivia experience created by the powerful J-Show Builder GPT.
            </p>
        </div>
    </div>
    <div class="row mt-5">
        <div class="col-12">
            <h2 class="text-center">Available JShows</h2>
            <p class="text-center">
                Explore the trivia questions and themes for each show by selecting a show card below.
            </p>
        </div>
    </div>
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4 mt-3">
        @if (Model == null || !Model.Any())
        {
            <div class="col">
                <div class="alert alert-warning text-center w-100">
                    <i class="bi bi-exclamation-triangle-fill"></i> No shows are currently available. Please check back later.
                </div>
            </div>
        }
        else
        {
            @foreach (var show in Model)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <div class="card-header bg-primary text-white">
                            <i class="bi bi-tv"></i> @show.Theme
                        </div>
                        <div class="card-body">
                            <p class="card-text">
                                <strong>Description:</strong> @show.Description
                            </p>
                        </div>
                        <div class="card-footer bg-transparent border-top-0">
                            <a asp-action="JShow" asp-route-id="@show.Theme" class="btn btn-primary w-100">
                                <i class="bi bi-eye"></i> Play @show.Theme
                            </a>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

<div class="container mt-4">


    <div class="row mt-5">
        <div class="col-md-8 offset-md-2">
            <h2>About the JShow Controller</h2>
            <p>
                The <strong>JShow Controller</strong> is the core of the JShow experience, designed to manage and present a variety of trivia shows. It interacts with the <strong>JShowService</strong> to retrieve show data from JSON files generated by the <a href="https://chatgpt.com/g/g-PbdFzh2Ke-j-show-builder-gpt" target="_blank">J-Show Builder GPT</a>.
            </p>
            <p>
                The JShow Controller's primary task is to list all available shows and allow users to select and view the content of each show. The data for each show, including the theme, air date, and detailed questions, is stored in JSON format and processed by the JShowService.
            </p>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-8 offset-md-2">
            <h2>How J-Show Builder GPT Works</h2>
            <p>
                The <a href="https://chatgpt.com/g/g-PbdFzh2Ke-j-show-builder-gpt" target="_blank">J-Show Builder GPT</a> is an AI-powered tool that creates the JSON files used by the JShow experience. Each JSON file represents a unique trivia show, complete with questions, categories, and themes.
            </p>
            <ul>
                <li><strong>Show Generation:</strong> The GPT generates each show's structure, including rounds, categories, and questions.</li>
                <li><strong>Custom Themes:</strong> It allows customization of themes and questions, making each show unique.</li>
                <li><strong>JSON Output:</strong> The generated content is saved as a JSON file, which the JShowService then reads and processes.</li>
            </ul>
            <p>
                The JSON files are stored in a designated folder and are dynamically read by the JShowService, ensuring a fresh and engaging trivia experience every time.
            </p>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-8 offset-md-2">
            <h2>Features of the JShowService</h2>
            <p>
                The <strong>JShowService</strong> is responsible for managing and delivering the content of the trivia shows. It provides several key features:
            </p>
            <ul>
                <li><strong>JSON File Management:</strong> Reads and parses JSON files to create a list of trivia shows, each with a unique show number.</li>
                <li><strong>Error Handling:</strong> Logs errors and continues processing other files, ensuring the system remains robust even if individual files are corrupted.</li>
                <li><strong>Dynamic Show Updates:</strong> Supports the addition of new shows without requiring a system restart, making it easy to update content on the fly.</li>
            </ul>
            <p>
                This service is essential for providing a seamless and dynamic trivia experience, enabling the JShow Controller to present a wide array of shows to the user.
            </p>
        </div>
    </div>

</div>