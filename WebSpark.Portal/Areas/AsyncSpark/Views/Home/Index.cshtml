@{
    ViewData["Title"] = "Async in .NET 8 - Demonstration Site";
    ViewData["Description"] = "Explore the power of asynchronous programming in .NET 8 with our comprehensive demonstration. Learn how to enhance your web applications with modern async patterns, including HttpClient decorators, HttpClientFactory integration, Polly resilience strategies, and advanced logging and telemetry.";
    ViewData["Keywords"] = "async, .NET 8, HttpClient, HttpClientFactory, Polly, logging, telemetry";
}

<div class="container mt-5">
    <div class="text-center">
        <h1 class="display-4">
            <i class="bi bi-lightning-fill text-primary"></i> Mastering Async in .NET 8
        </h1>
        <p class="lead">
            Explore the power of asynchronous programming in .NET 8 with our comprehensive demonstration. Learn how to enhance your web applications with modern async patterns, including HttpClient decorators, HttpClientFactory integration, Polly resilience strategies, and advanced logging and telemetry.
        </p>
    </div>

    <div class="row mt-4">
        <div class="col-md-4 text-center">
            <i class="bi bi-arrow-repeat display-1 text-success"></i>
            <h3>Async with HttpClient</h3>
            <p>
                Discover how to make efficient asynchronous HTTP requests using HttpClient and leverage the decorator pattern for enhanced functionality like retry, logging, and caching.
            </p>
        </div>
        <div class="col-md-4 text-center">
            <i class="bi bi-shield-lock-fill display-1 text-warning"></i>
            <h3>Polly & HttpClientFactory</h3>
            <p>
                Learn to create resilient HTTP clients with HttpClientFactory and Polly, implementing strategies such as retries, circuit breakers, and more, all using async methods.
            </p>
        </div>
        <div class="col-md-4 text-center">
            <i class="bi bi-bar-chart-fill display-1 text-info"></i>
            <h3>Logging & Telemetry</h3>
            <p>
                Integrate robust async logging and telemetry in your .NET 8 applications. Track performance, monitor errors, and gather insights with minimal impact on your application's performance.
            </p>
        </div>
    </div>
</div>

<div class="container my-5">
    <div class="card mb-5">
        <div class="card-header">
            <h2><i class="bi bi-journal-code text-secondary"></i> Decorator Pattern with HttpClient</h2>
        </div>
        <div class="card-body">
            <p>
                The <strong>Decorator Pattern</strong> is a structural design pattern that allows behavior to be added to individual objects, dynamically, without affecting the behavior of other objects from the same class. In this demo, we showcase how to use the decorator pattern with <code>HttpClient</code> to add features such as logging, retries, and error handling in a modular and maintainable way.
            </p>

            <h4><i class="bi bi-code-slash text-success"></i> Example: HttpClient Logging Decorator</h4>
            <pre class="language-csharp"><code class="language-csharp">
// Base Decorator Class
public class HttpClientDecorator : HttpClient
{
    protected readonly HttpClient _client;

    public HttpClientDecorator(HttpClient client)
    {
        _client = client;
    }
}

// Logging Decorator
public class LoggingHttpClientDecorator : HttpClientDecorator
{
    public LoggingHttpClientDecorator(HttpClient client) : base(client) { }

    public async Task<HttpResponseMessage> GetAsync(string requestUri)
    {
        Console.WriteLine($"Making request to {requestUri}");
        var response = await _client.GetAsync(requestUri);
        Console.WriteLine($"Received response: {response.StatusCode}");
        return response;
    }
}
            </code></pre>

            <h4><i class="bi bi-shield-check text-primary"></i> Example: Adding Resilience with Polly</h4>
            <p>
                Polly is a .NET resilience and transient-fault-handling library that allows you to define policies such as retries, circuit breakers, and fallbacks. Below is an example of how to integrate Polly with HttpClient using the decorator pattern:
            </p>
            <pre class="language-csharp"><code class="language-csharp">
// Polly Decorator
public class PollyHttpClientDecorator : HttpClientDecorator
{
    public PollyHttpClientDecorator(HttpClient client) : base(client) { }

    public async Task<HttpResponseMessage> GetAsync(string requestUri)
    {
        var retryPolicy = Policy
            .Handle<HttpRequestException>()
            .WaitAndRetryAsync(3, retryAttempt => TimeSpan.FromSeconds(Math.Pow(2, retryAttempt)));

        return await retryPolicy.ExecuteAsync(() => _client.GetAsync(requestUri));
    }
}
            </code></pre>

            <p>
                By combining different decorators, you can build a powerful, extensible HttpClient that can handle a variety of cross-cutting concerns such as logging and error handling without cluttering your business logic.
            </p>
        </div>
        <div class="card-footer text-muted">
            <i class="bi bi-cpu"></i> Enhance your .NET 8 applications by leveraging the decorator pattern and Polly for a resilient and maintainable HTTP client architecture.
        </div>
    </div>

    <div class="card mb-5">
        <div class="card-header">
            <h2><i class="bi bi-gear-fill text-secondary"></i> Best Practices for Using Decorators</h2>
        </div>
        <div class="card-body">
            <ul class="list-group">
                <li class="list-group-item">
                    <i class="bi bi-arrow-right-circle-fill text-primary"></i> <strong>Single Responsibility:</strong> Each decorator should handle one specific concern, such as logging or retries, keeping the implementation clean and focused.
                </li>
                <li class="list-group-item">
                    <i class="bi bi-arrow-right-circle-fill text-primary"></i> <strong>Dependency Injection:</strong> Use dependency injection to manage decorators, allowing for easy swapping and configuration.
                </li>
                <li class="list-group-item">
                    <i class="bi bi-arrow-right-circle-fill text-primary"></i> <strong>Testing:</strong> Decorators should be independently testable, ensuring each functionality can be verified in isolation.
                </li>
            </ul>
        </div>
        <div class="card-footer text-muted">
            <i class="bi bi-lightbulb-fill text-warning"></i> Implementing decorators correctly will lead to more maintainable, scalable, and robust applications.
        </div>
    </div>

    <div class="alert alert-info mt-5" role="alert">
        <h4 class="alert-heading"><i class="bi bi-lightbulb-fill text-warning"></i> Why Async Matters</h4>
        <p>
            Asynchronous programming is crucial for building modern web applications that are fast, responsive, and capable of handling complex interactions with external data sources. This demo project provides practical insights and examples of how async techniques can be implemented in .NET 8, empowering developers to create more efficient and engaging applications.
        </p>
        <hr>
        <p class="mb-0">
            Dive into the demos, explore the code, and see how async programming can elevate your development skills to the next level!
        </p>
    </div>
</div>

