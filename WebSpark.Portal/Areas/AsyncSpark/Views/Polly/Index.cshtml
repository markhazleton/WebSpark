@using HttpClientUtility.MockService
@model MockResults
@{
    ViewData["Title"] = "Async API Polly Page - Resilient API Calls with Polly in .NET 8";
    ViewData["Description"] = "Learn how to build resilient .NET 8 web applications using Polly for advanced retry strategies. Explore the power of asynchronous programming to handle transient faults in HTTP requests efficiently.";
    ViewData["Keywords"] = "async, .NET 8, Polly, resilience, retry, circuit breaker, timeout, MockService, async methods";
    var bgColorClass = Model?.Message != "Task Complete" ? "bg-danger" : "bg-success"; // Using Bootstrap background color classes
}

<section class="container-fluid my-5">
    <div class="row mb-4">
        <div class="col-md-12 text-center">
            <h1 class="display-4">
                <i class="bi bi-arrow-repeat"></i> Polly Async API Demo
            </h1>
            <p class="lead">
                Learn how to build resilient .NET 8 web applications using Polly for advanced retry strategies. Explore the power of asynchronous programming to handle transient faults in HTTP requests efficiently.
            </p>
        </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            <dl class="@bgColorClass text-white rounded p-3">
                <dt class="text-start ps-2"><i class="bi bi-loop"></i> Loop Count</dt>
                <dd class="text-start ps-2 border-bottom">@Model?.LoopCount</dd>
                <dt class="text-start ps-2"><i class="bi bi-clock-history"></i> Max Time (ms)</dt>
                <dd class="text-start ps-2 border-bottom">@Model?.MaxTimeMS</dd>
                <dt class="text-start ps-2"><i class="bi bi-check-circle-fill"></i> Result</dt>
                <dd class="text-start ps-2 border-bottom">@Model?.ResultValue</dd>
                <dt class="text-start ps-2"><i class="bi bi-speedometer2"></i> RunTime (ms)</dt>
                <dd class="text-start ps-2 border-bottom">@Model?.RunTimeMS</dd>
                <dt class="text-start ps-2"><i class="bi bi-info-circle"></i> Message</dt>
                <dd class="text-start ps-2">@Html.Raw(Model?.Message)</dd>
            </dl>
            <div class="text-center">
                <div class="test-list">
                    <h2 class="h5 mb-3"><i class="bi bi-play-circle"></i> Test the API with Polly Timeouts</h2>
                    <nav class="nav flex-column nav-pills p-2 border rounded">
                        <a class="nav-link border-bottom py-2" href="/asyncspark/polly?loopCount=40&maxTimeMs=1500">40 Loops, max 1.5 seconds</a>
                        <a class="nav-link border-bottom py-2" href="/asyncspark/polly?loopCount=40&maxTimeMs=1000">40 Loops, max 1 second</a>
                        <a class="nav-link py-2" href="/asyncspark/polly?loopCount=40&maxTimeMs=500">40 Loops, max 1/2 second</a>
                    </nav>
                </div>
            </div>
        </div>
        <div class="col-md-8">
            <div>
                <form class="form-horizontal" action="/asyncspark/polly" method="get">
                    <fieldset>
                        <legend><i class="bi bi-gear"></i> Submit Timeout Test</legend>
                        <p>
                            This demonstration showcases how to handle transient errors in HTTP requests using Polly's async retry strategies. Select the number of loops and the maximum allowed response time to see Polly in action.
                        </p>
                        <div class="form-group row">
                            <label class="col-md-4 control-label" for="loopCount">Number of Loops</label>
                            <div class="col-md-8">
                                <select id="loopCount" name="loopCount" class="form-control">
                                    @for (int i = 10; i <= 100; i += 10)
                                    {
                                        if (Model?.LoopCount == i)
                                        {
                                            <option value="@i" selected>@i</option>
                                        }
                                        else
                                        {
                                            <option value="@i">@i</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="form-group row mt-3">
                            <label class="col-md-4 control-label" for="maxTimeMs">Max Response Time</label>
                            <div class="col-md-8">
                                <select id="maxTimeMs" name="maxTimeMs" class="form-control">
                                    @foreach (var time in new[] { 100, 200, 500, 750, 1000, 1500, 3000, 5000 })
                                    {
                                        if (Model?.MaxTimeMS == time)
                                        {
                                            <option value="@time" selected>@time</option>
                                        }
                                        else
                                        {
                                            <option value="@time">@time</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="form-group row mt-3">
                            <label class="col-md-4 control-label" for="singlebutton">Submit Request</label>
                            <div class="col-md-8">
                                <button id="singlebutton" name="singlebutton" class="btn btn-primary">
                                    <i class="bi bi-send"></i> Submit Request
                                </button>
                            </div>
                        </div>
                    </fieldset>
                </form>
            </div>
        </div>
    </div>
</section>

<section class="container-fluid mt-5">
    <div class="row">
        <div class="col-md-12">
            <h2 class="display-5 text-center mb-4"><i class="bi bi-book-fill text-primary"></i> Understanding Polly: Features, Purpose, and Best Practices</h2>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <h3><i class="bi bi-clock-history"></i> Features of Polly</h3>
            <p>
                Polly provides a suite of resilience strategies that help make your .NET applications robust and fault-tolerant. Key features include:
            </p>
            <ul class="list-group">
                <li class="list-group-item">
                    <i class="bi bi-arrow-repeat text-success"></i> <strong>Retry:</strong> Polly’s retry feature allows you to automatically retry failed operations, with customizable delay strategies such as exponential backoff and jitter to avoid synchronized retries that can overwhelm a service.
                </li>
                <li class="list-group-item">
                    <i class="bi bi-shield-fill text-warning"></i> <strong>Circuit Breaker:</strong> Circuit breakers stop repetitive attempts to access a service when it’s known to be down, allowing the service time to recover before new requests are allowed.
                </li>
                <li class="list-group-item">
                    <i class="bi bi-clock-fill text-primary"></i> <strong>Timeouts:</strong> Timeouts automatically cancel requests that exceed a specified duration, helping to prevent your application from hanging due to unresponsive services.
                </li>
                <li class="list-group-item">
                    <i class="bi bi-arrow-down-up text-info"></i> <strong>Bulkhead Isolation:</strong> Bulkheads limit the number of concurrent calls to a particular resource, preventing overloads by isolating failures to a specific section of the application.
                </li>
                <li class="list-group-item">
                    <i class="bi bi-umbrella-fill text-danger"></i> <strong>Fallback:</strong> Fallback strategies provide alternative actions when all other policies fail, such as returning a default response or invoking a secondary service.
                </li>
            </ul>
        </div>
        <div class="col-md-6">
            <h3><i class="bi bi-people-fill"></i> Purpose and Best Practices</h3>
            <p>
                The primary purpose of Polly is to help developers build resilient applications that can handle transient faults gracefully. By using Polly, you can create systems that are not only robust against temporary outages but also optimize user experience by avoiding unnecessary failures and retries.
            </p>

            <h4 class="mt-4"><i class="bi bi-lightbulb-fill text-warning"></i> Best Practices</h4>
            <ul class="list-group list-group-flush">
                <li class="list-group-item">
                    <span class="fw-bold">Start with Retries:</span> Begin with basic retry logic, but ensure that retries are well-thought-out with exponential backoff to avoid overwhelming the service.
                </li>
                <li class="list-group-item">
                    <span class="fw-bold">Use Circuit Breakers:</span> Combine retries with circuit breakers to prevent cascading failures and avoid self-inflicted Denial of Service (DoS) scenarios where too many retries flood a struggling backend service.
                </li>
                <li class="list-group-item">
                    <span class="fw-bold">Combine Multiple Policies:</span> Mix retries with fallbacks, circuit breakers, and bulkhead isolation to build a comprehensive resilience strategy.
                </li>
                <li class="list-group-item">
                    <span class="fw-bold">Monitor and Log:</span> Implement logging and monitoring to track the performance of Polly policies in real-time, allowing for adjustments based on actual system behavior.
                </li>
                <li class="list-group-item">
                    <span class="fw-bold">Test in Staging Environments:</span> Regularly test the configurations in a staging environment to validate that policies behave as expected under simulated failure conditions.
                </li>
            </ul>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-6">
            <h3><i class="bi bi-diagram-3"></i> Understanding the Retry Model</h3>
            <p>
                The retry model in Polly is designed to handle transient faults such as network blips or temporary service outages. By retrying an operation a specified number of times with defined delays, you can often succeed without user intervention. However, it’s crucial to configure retries correctly:
            </p>
            <p>
                <strong>Potential Pitfall - Self-inflicted DoS</strong>: Poorly configured retries, especially with immediate retries or too many attempts, can lead to a self-inflicted Denial of Service (DoS) attack. When a backend service is under load or stress, excessive retries can exacerbate the problem by increasing traffic precisely when the service is least capable of handling it. To mitigate this risk, use strategies like:
            </p>
            <ul>
                <li><strong>Exponential Backoff:</strong> Increase the delay between retries exponentially to reduce the retry rate over time.</li>
                <li><strong>Jitter:</strong> Add randomness to retry intervals to avoid synchronized retries from multiple clients.</li>
                <li><strong>Max Retry Attempts:</strong> Limit the number of retries to prevent excessive load on struggling services.</li>
            </ul>
        </div>
        <div class="col-md-6">
            <h3><i class="bi bi-slash-circle"></i> Circuit Breakers - When to Use Them</h3>
            <p>
                Circuit breakers are critical in preventing repeated calls to a failing service, which can lead to cascading failures in a distributed system. They work by opening a circuit after a specified number of failures, temporarily stopping requests to give the service time to recover.
            </p>

            <h4 class="mt-4"><i class="bi bi-exclamation-triangle-fill text-danger"></i> Use Cases for Circuit Breakers</h4>
            <ul class="list-group list-group-flush">
                <li class="list-group-item">
                    <span class="fw-bold">Protecting Services:</span> Use circuit breakers to protect critical services from being overwhelmed by repeated failure requests.
                </li>
                <li class="list-group-item">
                    <span class="fw-bold">Graceful Degradation:</span> During outages, circuit breakers allow your application to degrade gracefully rather than fail completely.
                </li>
                <li class="list-group-item">
                    <span class="fw-bold">Recovery Monitoring:</span> Circuit breakers automatically test the service periodically to determine if it has recovered and, if so, resume normal operations.
                </li>
            </ul>

            <p class="mt-3">
                By incorporating circuit breakers alongside retries, you can create a balanced approach that keeps your application responsive without overloading your backend systems.
            </p>
        </div>
    </div>

    <div class="row mt-5">
        <div class="col-md-12 text-center">
            <p class="lead">
                By leveraging Polly, you can significantly enhance the resilience of your .NET applications, making them robust against a wide range of transient failures. Whether you’re building microservices, APIs, or client applications, Polly’s powerful and flexible approach to fault handling ensures that your applications remain reliable and user-friendly under stress.
            </p>
            <a href="https://github.com/App-vNext/Polly" target="_blank" class="btn btn-outline-primary">
                <i class="bi bi-box-arrow-up-right"></i> Learn More About Polly on GitHub
            </a>
        </div>
    </div>
</section>

<section class="container-fluid mt-5">
    <div class="row">
        <div class="col-12">
            <h1 class="display-4 text-center mb-4">Understanding PollyController</h1>
            <p class="lead text-center">Learn how to implement resilient HTTP requests in ASP.NET Core using Polly for retries and circuit breakers.</p>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <h2><i class="bi bi-gear"></i> Introduction to PollyController</h2>
            <p>The <strong>PollyController</strong> demonstrates the use of <a href="https://github.com/App-vNext/Polly" target="_blank">Polly</a> for handling retries and circuit breakers in HTTP requests within an ASP.NET Core application. This approach helps in managing transient faults and maintaining service resilience.</p>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <h2><i class="bi bi-code-slash"></i> Code Samples</h2>
            <p>Below are key code snippets from the PollyController that showcase how to set up and use retry and circuit breaker policies with Polly.</p>

            <h3>1. Setting Up Retry Policy</h3>
            <p>This method defines a retry policy with jitter to handle failed HTTP requests by retrying the operation with a delay.</p>
            <pre class="language-csharp"><code class="language-csharp">
private AsyncRetryPolicy&lt;HttpResponseMessage&gt; GetAsyncRetryPolicy(Random jitter, string retryCountKey)
{
    var retryPolicy = Policy
        .HandleResult&lt;HttpResponseMessage&gt;(r => !r.IsSuccessStatusCode)
        .WaitAndRetryAsync(
            3,
            retryAttempt => TimeSpan.FromMilliseconds(100) + TimeSpan.FromMilliseconds(jitter.Next(0, 100)),
            onRetry: (response, timespan, retryCount, context) =>
            {
                context[retryCountKey] = retryCount;
                var message = response.Result?.StatusCode.ToString() ?? "Request failed without response.";
                if (response.Exception != null)
                {
                    message += $" Exception: {response.Exception.Message}";
                }
                logger.LogWarning("Request failed with {StatusCode}. Waiting {Timespan} before next retry. Retry attempt {RetryCount}.",
                                  response.Result?.StatusCode, timespan, retryCount);
            });
    return retryPolicy;
}
            </code></pre>

            <h3>2. Setting Up Circuit Breaker Policy</h3>
            <p>The circuit breaker policy stops further requests when a specified number of consecutive failures occur, helping to avoid overwhelming a struggling service.</p>
            <pre class="language-csharp"><code class="language-csharp">
private AsyncCircuitBreakerPolicy&lt;HttpResponseMessage&gt; GetCircuitBreakPolicy()
{
    var circuitBreakerPolicy = Policy
        .HandleResult&lt;HttpResponseMessage&gt;(r => !r.IsSuccessStatusCode)
        .CircuitBreakerAsync(
            3, 
            TimeSpan.FromSeconds(10),
            onBreak: (outcome, breakDelay) =>
            {
                logger.LogWarning("Circuit breaker opened due to {StatusCode}. Waiting {BreakDelay} before next attempt.",
                                   outcome.Result?.StatusCode, breakDelay);
            },
            onReset: () => logger.LogInformation("Circuit breaker reset."),
            onHalfOpen: () => logger.LogInformation("Circuit breaker half-open: Testing the service again."));
    return circuitBreakerPolicy;
}
            </code></pre>

            <h3>3. Executing HTTP Requests with Policies</h3>
            <p>This example shows how the retry and circuit breaker policies are applied to HTTP requests executed in the controller.</p>
            <pre class="language-csharp"><code class="language-csharp">
public async Task&lt;IActionResult&gt; Index(int loopCount = 1, int maxTimeMs = 1000)
{
    var context = new Context { { "retrycount", 0 }, { "ResultsList", new List&lt;string&gt;() } };
    var mockResults = new MockResults { LoopCount = loopCount, MaxTimeMS = maxTimeMs };
    var request = new HttpRequestMessage(HttpMethod.Post, $"{Request.Scheme}://{Request.Host}{Request.PathBase}/api/asyncspark/remote/results")
    {
        Content = JsonContent.Create(mockResults)
    };

    using var cts = new CancellationTokenSource(maxTimeMs);
    HttpResponseMessage response = await ExecuteRequestWithPoliciesAsync(request, context, cts.Token);

    await HandleResponse(response, mockResults);

    // Stop timing the operation and set the runtime
    mockResults.RunTimeMS = GetElapsedMilliseconds();

    // Return the results to the view
    return View("Index", mockResults);
}
            </code></pre>

            <h2><i class="bi bi-lightning-charge"></i> Key Takeaways</h2>
            <ul class="list-group mb-4">
                <li class="list-group-item">Polly provides a powerful and flexible way to handle transient faults in HTTP communications.</li>
                <li class="list-group-item">Retry policies allow for controlled retries with customizable delays and error handling logic.</li>
                <li class="list-group-item">Circuit breaker policies prevent cascading failures by breaking the circuit when too many errors occur, allowing time for recovery.</li>
            </ul>

            <h2><i class="bi bi-book"></i> Additional Resources</h2>
            <p>For more information on Polly and its use in ASP.NET Core, visit the official Polly documentation and explore the various policies and patterns available:</p>
            <ul>
                <li><a href="https://github.com/App-vNext/Polly" target="_blank">Polly GitHub Repository</a></li>
                <li><a href="https://docs.microsoft.com/en-us/dotnet/architecture/cloud-native/resilient-web-applications" target="_blank">Building Resilient Web Applications</a></li>
            </ul>
        </div>
    </div>
</section>

<section class="container-fluid mt-5">
    <div class="row">
        <div class="col-md-12">
            <h2 class="display-5 text-center mb-4"><i class="bi bi-book-fill text-primary"></i> Understanding the AsyncMockService and Its Role in Polly Demos</h2>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <h3><i class="bi bi-cpu-fill"></i> What is AsyncMockService?</h3>
            <p>
                The <strong>AsyncMockService</strong> is a utility class used to simulate various asynchronous operations that are common in real-world applications. It includes methods that represent long-running tasks, support for cancellation, and handling of exceptions, making it an ideal target endpoint for demonstrating how Polly can be used to manage resilience in asynchronous programming.
            </p>
            <p>
                This service is designed to mimic scenarios such as processing heavy computations, handling cancellations gracefully, and dealing with unexpected errors. These examples provide a practical demonstration of how Polly's resilience strategies can be applied to enhance the stability and reliability of .NET applications under varying conditions.
            </p>
        </div>
        <div class="col-md-6">
            <h3><i class="bi bi-gear-wide-connected"></i> Key Methods in AsyncMockService</h3>
            <ul class="list-group">
                <li class="list-group-item">
                    <i class="bi bi-arrow-repeat"></i> <strong>ExampleMethodAsync:</strong> Demonstrates continuous work that checks for cancellation requests, simulating a task that can be stopped gracefully using cancellation tokens.
                </li>
                <li class="list-group-item">
                    <i class="bi bi-hourglass-split"></i> <strong>LongRunningCancellableOperation:</strong> A long-running task that loops for a specified number of iterations, introducing delays and checking for cancellations. This method throws a <code>TaskCanceledException</code> when a cancellation is requested, illustrating proper cancellation handling in async operations.
                </li>
                <li class="list-group-item">
                    <i class="bi bi-hourglass-bottom"></i> <strong>LongRunningOperation:</strong> Simulates a long-running operation without cancellation support, useful for testing how Polly handles retries on operations that do not natively support cancellation.
                </li>
                <li class="list-group-item">
                    <i class="bi bi-shield-lock"></i> <strong>LongRunningOperationWithCancellationTokenAsync:</strong> An advanced method that combines long-running operations with a cancellation token using a <code>TaskCompletionSource</code>. This pattern ensures that operations can be cancelled properly and results can be returned or cancelled based on task completion.
                </li>
                <li class="list-group-item">
                    <i class="bi bi-clock-history"></i> <strong>LongRunningTask:</strong> A comprehensive demonstration of handling long-running tasks with cancellation, exception management, and performance logging. This method showcases how to log progress, handle exceptions, and respect cancellation requests, making it ideal for testing Polly's circuit breakers and retry logic.
                </li>
                <li class="list-group-item">
                    <i class="bi bi-tools"></i> <strong>PerformTaskAsync:</strong> A utility method that performs a unit of work with optional delays and error simulation. It checks for cancellation requests and can throw exceptions to demonstrate error handling.
                </li>
            </ul>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-12 text-center">
            <p class="lead">
                The <strong>AsyncMockService</strong> provides a versatile set of methods that simulate real-world async scenarios,
                making it an excellent tool for demonstrating how Polly's resilience strategies can be applied to manage transient
                faults, cancellations, and errors effectively. Whether you are testing retries, circuit breakers, or timeout strategies,
                the <strong>AsyncMockService</strong> offers practical examples to explore and refine your approach to building resilient .NET applications.
            </p>
            <a href="https://github.com/markhazleton/webspark" target="_blank" class="btn btn-outline-primary">
                <i class="bi bi-box-arrow-up-right"></i> Learn More About AsyncMockService on GitHub repository for WebSpark
            </a>
        </div>
    </div>
</section>
