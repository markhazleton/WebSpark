@using System.Text.Json
@using WebSpark.Portal.Areas.GitHubSpark.Services.GitHub
@using Microsoft.AspNetCore.Mvc.ViewFeatures
@model GitHubCacheViewModel
@{
    ViewData["Title"] = "Integrating GitHub into WebSpark's GitHubSpark";
    ViewData["Description"] = "Learn how to integrate GitHub user and repository data into the GitHubSpark section of WebSpark, using async programming in .NET and Bootstrap 5 for a polished UI.";
    ViewData["Keywords"] = "GitHub API, async programming, WebSpark, Bootstrap 5, .NET async example";
}

<div class="container my-5">
    <div class="row">
        <!-- User Info Section -->
        <div class="col-md-4">
            @await Html.PartialAsync("_gitHubUserResponse", Model.User)
            @await Html.PartialAsync("_gitHubFollowerResponse", Model.Following, new ViewDataDictionary(ViewData) { { "SubTitle", "Following" } })
            @await Html.PartialAsync("_gitHubFollowerResponse", Model.Followers, new ViewDataDictionary(ViewData) { { "SubTitle", "Followers" } })
        </div>
        <!-- Repo Info Section -->
        <div class="col-md-8">
            @await Html.PartialAsync("_gitHubRepoResponse", Model.RepoInfo)
        </div>
    </div>
</div>

<section class="py-5 bg-light">
    <div class="container">
        <h2 class="text-center mb-4">Understanding GitHub and Its API</h2>
        <p>
            GitHub is the world's leading platform for software development and version control, enabling millions of developers to collaborate on open-source projects and private repositories. With a rich ecosystem of tools for version control, collaboration, and code management, GitHub has become essential for both individual developers and large teams.
        </p>
        <p>
            At the core of GitHub's capabilities lies the GitHub API, a powerful interface that allows developers to programmatically interact with GitHub data. Whether you're looking to retrieve user profiles, list repositories, or track issues and pull requests, the GitHub API provides an accessible and efficient way to integrate GitHub's vast data into your applications.
        </p>
        <p>
            By using the GitHub API, developers can automate workflows, create custom dashboards, and extend the functionality of their projects with data straight from GitHub. In this guide, we'll explore how to leverage this API to asynchronously fetch user and repository information, integrating it into a responsive and polished web interface using .NET and Bootstrap 5.
        </p>
        <p class="text-center">
            <a href="https://docs.github.com/en/rest" class="btn btn-outline-primary mt-4" target="_blank">
                <i class="bi bi-github"></i> Explore GitHub API Documentation
            </a>
        </p>
    </div>
</section>

<div class="container my-5">
    <div class="row">
        <div class="col-12">
            <h1>Integrating GitHub User and Repo Data into WebSpark's GitHubSpark Section</h1>
            <p>
                In this tutorial, we'll walk through how to use GitHub's API and asynchronous programming in .NET to create a responsive and interactive interface for displaying GitHub user and repository data in the <strong>GitHubSpark</strong> section of WebSpark. We will also make use of Bootstrap 5 to design a polished and user-friendly interface.
            </p>

            <h2>Why Use Async Programming?</h2>

            <p>
                Asynchronous programming is crucial when working with external APIs, like GitHub's, because it ensures the web page remains responsive while waiting for the API responses. The async/await pattern in .NET helps make non-blocking API calls and ensures that the user experience is not interrupted, enhancing the smoothness and efficiency of your web application.
            </p>

            <h2>Fetching GitHub Data Asynchronously</h2>

            <p>First, we will create a method that fetches GitHub user and repository data asynchronously using the <code>HttpClient</code> class. This allows us to make non-blocking HTTP requests to the GitHub API.</p>

            <pre class="bg-light p-3 rounded">
<code class="language-csharp">
public async Task&lt;GitHubCacheViewModel&gt; GetGitHubDataAsync(string username, string repoName)
{
    var user = await _httpClient.GetFromJsonAsync&lt;GitHubUser&gt;($"https://api.github.com/users/{username}");
    var repo = await _httpClient.GetFromJsonAsync&lt;GitHubRepo&gt;($"https://api.github.com/repos/{username}/{repoName}");

    return new GitHubCacheViewModel
    {
        User = user,
        RepoInfo = repo
    };
}
</code>
</pre>

            <p>
                In the code above, we use the <code>await</code> keyword to make sure the API requests to GitHub are handled asynchronously, improving the efficiency of our application by not blocking the main thread.
            </p>

            <h2>Creating the View Model</h2>

            <p>
                Next, we define a view model, <code>GitHubCacheViewModel</code>, to store the user and repository data. This helps to separate the data fetching logic from the view.
            </p>

            <pre class="bg-light p-3 rounded">
<code class="language-csharp">
public class GitHubCacheViewModel
{
    public GitHubRepo? RepoInfo { get; set; }
    public GitHubUser? User { get; set; }
}
</code>
</pre>

            <p>
                With this model, we can easily pass data from our controller to the view and render it in the UI.
            </p>

            <h2>Building the Bootstrap-Powered View</h2>

            <p>
                We can now create a Bootstrap-powered view to display the GitHub user and repository data. Bootstrap 5's responsive components make it easy to create an attractive and functional UI that works across different screen sizes. Below is an example of how to display the GitHub user's information in a card component.
            </p>

            <pre class="bg-light p-3 rounded">
<code class="language-html">
&lt;div class="card shadow-sm"&gt;
    &lt;div class="card-header bg-dark text-white"&gt;
        &lt;h5 class="card-title mb-0"&gt;
            &lt;i class="bi bi-person-circle"&gt;&lt;/i&gt; GitHub User
        &lt;/h5&gt;
    &lt;/div&gt;
    &lt;div class="card-body text-center"&gt;
        &lt;img src="@@Model.User?.ResponseResults?.AvatarUrl" alt="Avatar" class="rounded-circle img-thumbnail mb-3"&gt;
        &lt;h5 class="card-title"&gt;@@Model.User?.ResponseResults?.Login&lt;/h5&gt;
        &lt;p class="text-muted"&gt;@@Model.User?.ResponseResults?.Bio&lt;/p&gt;
        &lt;a href="@@Model.User?.ResponseResults?.HtmlUrl" class="btn btn-primary" target="_blank"&gt;
            &lt;i class="bi bi-github"&gt;&lt;/i&gt; View Profile
        &lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code>
</pre>

            <p>
                In this example, we used Bootstrap's <code>card</code> component along with Bootstrap Icons to create a user-friendly and aesthetically pleasing UI for displaying GitHub user data.
            </p>

            <h2>Handling Asynchronous Fetching with Grace</h2>

            <p>
                When working with asynchronous data fetching, it's essential to provide feedback to the user. If the GitHub API request fails or data is unavailable, displaying an error message can enhance the user experience.
            </p>

            <div class="bg-light p-3 rounded">
<pre><code class="language-html">
@@if (Model.User == null)
{
    &lt;div class="alert alert-danger" role="alert"&gt;
        Could not retrieve GitHub user data. Please try again later.
    &lt;/div&gt;
}
</code></pre>
            </div>

            <p>
                This ensures that the UI remains engaging, even if the external API call fails.
            </p>

            <h2>Conclusion</h2>

            <p>
                Integrating GitHub user and repository data into the GitHubSpark section of WebSpark demonstrates the power of asynchronous programming in .NET. Not only does it show how easily external APIs can be consumed, but it also highlights how to build a responsive, user-friendly interface using Bootstrap 5.
            </p>

            <p>
                Asynchronous programming ensures that the page loads smoothly, even when waiting for external resources like GitHub's API. Combining clean async code with polished Bootstrap design, WebSpark illustrates how developers can benefit from both performance and aesthetics in real-world applications.
            </p>
        </div>
    </div>
</div>