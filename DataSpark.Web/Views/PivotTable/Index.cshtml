@model PivotTableViewModel
@{
    ViewData["Title"] = "Interactive Pivot Table";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.23.0/pivot.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/c3/0.4.11/c3.min.css" />
    <style>
        .pivot-container {
            margin: 20px 0;
            min-height: 600px;
        }

        .config-panel {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .file-selector {
            margin-bottom: 15px;
        }

        .pivot-controls {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            align-items: center;
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }

        .loading-spinner {
            background: white;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
        }

        .error-message {
            background: #f8d7da;
            color: #721c24;
            padding: 10px;
            border-radius: 4px;
            margin: 10px 0;
            display: none;
        }

        .success-message {
            background: #d4edda;
            color: #155724;
            padding: 10px;
            border-radius: 4px;
            margin: 10px 0;
            display: none;
        }
    </style>
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h2>@ViewData["Title"]</h2>
            <p class="text-muted">Create interactive pivot tables from your CSV data with drag-and-drop functionality.
            </p>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="config-panel">
                <div class="row">
                    <div class="col-md-6">
                        <div class="file-selector">
                            <label for="csvFileSelect" class="form-label">Select CSV File:</label>
                            <select id="csvFileSelect" class="form-select">
                                <option value="">-- Select a CSV file --</option>
                                @foreach (var file in Model.AvailableFiles)
                                {
                                    if (file == Model.CurrentFile)
                                    {
                                        <option value="@file" selected>@file</option>
                                    }
                                    else
                                    {
                                        <option value="@file">@file</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="pivot-controls">
                            <button id="loadDataBtn" class="btn btn-primary" disabled>
                                <i class="fas fa-download"></i> Load Data
                            </button>
                            <button id="saveConfigBtn" class="btn btn-success" disabled>
                                <i class="fas fa-save"></i> Save Configuration
                            </button>
                            <button id="exportBtn" class="btn btn-info" disabled>
                                <i class="fas fa-file-export"></i> Export
                            </button>
                            <a href="@Url.Action("FullPage", "PivotTable")" class="btn btn-outline-secondary"
                                target="_blank">
                                <i class="fas fa-expand"></i> Full Screen
                            </a>
                        </div>
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(Model.CurrentFile))
                {
                    <div class="row mt-3">
                        <div class="col-12">
                            <div class="alert alert-info">
                                <strong>Current File:</strong> @Model.CurrentFile
                                <span class="ms-3"><strong>Records:</strong> @Model.RecordCount.ToString("N0")</span>
                                <span class="ms-3"><strong>Columns:</strong> @Model.ColumnHeaders.Count</span>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div id="errorMessage" class="error-message"></div>
            <div id="successMessage" class="success-message"></div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="pivot-container">
                <div id="pivotTableContainer">
                    @if (string.IsNullOrEmpty(Model.CurrentFile))
                    {
                        <div class="text-center text-muted py-5">
                            <i class="fas fa-table fa-3x mb-3"></i>
                            <h4>Select a CSV file to begin</h4>
                            <p>Choose a CSV file from the dropdown above to start creating your pivot table.</p>
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted py-5">
                            <i class="fas fa-spinner fa-spin fa-2x mb-3"></i>
                            <h4>Loading pivot table...</h4>
                            <p>Please wait while we prepare your data for analysis.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Loading Overlay -->
<div id="loadingOverlay" class="loading-overlay">
    <div class="loading-spinner">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <div class="mt-2">Processing data...</div>
    </div>
</div>

<!-- Save Configuration Modal -->
<div class="modal fade" id="saveConfigModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Save Pivot Configuration</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="configName" class="form-label">Configuration Name:</label>
                    <input type="text" id="configName" class="form-control"
                        placeholder="Enter a name for this configuration">
                    <div class="form-text">Choose a descriptive name to help you identify this configuration later.
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="saveConfigConfirmBtn" class="btn btn-primary">Save Configuration</button>
            </div>
        </div>
    </div>
</div>

<!-- Export Modal -->
<div class="modal fade" id="exportModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Export Pivot Table</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Export Format:</label>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="exportFormat" id="exportCsv" value="csv"
                            checked>
                        <label class="form-check-label" for="exportCsv">CSV (Comma-separated values)</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="exportFormat" id="exportTsv" value="tsv">
                        <label class="form-check-label" for="exportTsv">TSV (Tab-separated values)</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="exportFormat" id="exportExcel" value="excel">
                        <label class="form-check-label" for="exportExcel">Excel (.xlsx)</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="exportFormat" id="exportJson" value="json">
                        <label class="form-check-label" for="exportJson">JSON (with configuration)</label>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="exportConfirmBtn" class="btn btn-primary">Export Data</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.13.2/jquery-ui.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.23.0/pivot.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/c3/0.4.11/c3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.23.0/d3_renderers.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.23.0/c3_renderers.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.23.0/export_renderers.min.js"></script>

    <script>
        $(document).ready(function ()
        {
            let pivotData = null;
            let currentConfig = null;

            console.log('Pivot table index page loaded');
            console.log('jQuery version:', $.fn.jquery);
            console.log('jQuery UI available:', typeof $.ui !== 'undefined');
            console.log('PivotTable available:', typeof $.pivotUtilities !== 'undefined');

            // Initialize UI state
            updateUIState();

            // Event handlers
            $('#csvFileSelect').change(function ()
            {
                const selectedFile = $(this).val();
                $('#loadDataBtn').prop('disabled', !selectedFile);

                if (selectedFile)
                {
                    showMessage('File selected: ' + selectedFile, 'info');
                }
            });

            $('#loadDataBtn').click(function ()
            {
                const selectedFile = $('#csvFileSelect').val();
                if (!selectedFile)
                {
                    showMessage('Please select a CSV file first.', 'error');
                    return;
                }

                loadCsvData(selectedFile);
            });

            $('#saveConfigBtn').click(function ()
            {
                if (!pivotData)
                {
                    showMessage('Please load data first.', 'error');
                    return;
                }

                $('#saveConfigModal').modal('show');
            });

            $('#saveConfigConfirmBtn').click(function ()
            {
                const configName = $('#configName').val().trim();
                if (!configName)
                {
                    showMessage('Please enter a configuration name.', 'error');
                    return;
                }

                saveConfiguration(configName);
            });

            $('#exportBtn').click(function ()
            {
                if (!pivotData)
                {
                    showMessage('Please load data first.', 'error');
                    return;
                }

                $('#exportModal').modal('show');
            });

            $('#exportConfirmBtn').click(function ()
            {
                const format = $('input[name="exportFormat"]:checked').val();
                exportData(format);
            });

            // Load data if current file is available
            @if (!string.IsNullOrEmpty(Model.CurrentFile))
                {
                    <text>
                                setTimeout(() => {
                            loadCsvData('@Model.CurrentFile');
                                }, 500);
                    </text>
            }

                function loadCsvData(fileName)
                {
                    showLoading(true);

                    $.ajax({
                        url: '@Url.Action("LoadCsvData", "PivotTable")',
                        method: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({ fileName: fileName }),
                        success: function (response)
                        {
                            if (response.success)
                            {
                                pivotData = response.data;
                                createPivotTable(response.data);
                                updateUIState();
                                showMessage(`Data loaded successfully: ${response.recordCount} records, ${response.columns.length} columns`, 'success');
                            } else
                            {
                                showMessage('Error: ' + response.error, 'error');
                            }
                        },
                        error: function (xhr, status, error)
                        {
                            showMessage('Failed to load CSV data: ' + error, 'error');
                        },
                        complete: function ()
                        {
                            showLoading(false);
                        }
                    });
                }

            function createPivotTable(data)
            {
                console.log('Creating pivot table with data:', data);
                console.log('Data length:', data ? data.length : 'null');
                console.log('Sample data:', data ? data.slice(0, 2) : 'no data');

                if (!data || data.length === 0)
                {
                    $('#pivotTableContainer').html(`
                                <div class="text-center text-muted py-5">
                                    <i class="fas fa-exclamation-triangle fa-2x mb-3"></i>
                                    <h4>No data available</h4>
                                    <p>The selected file appears to be empty or could not be processed.</p>
                                </div>
                            `);
                    return;
                }

                // Clear any existing pivot table
                $('#pivotTableContainer').empty();

                try
                {
                    // Ensure all required libraries are loaded
                    if (typeof $.pivotUtilities === 'undefined')
                    {
                        throw new Error('PivotTable.js library not loaded');
                    }

                    // Get all available renderers with fallbacks
                    const renderers = {};

                    // Always include basic renderers
                    if ($.pivotUtilities.renderers)
                    {
                        $.extend(renderers, $.pivotUtilities.renderers);
                    }

                    // Add D3 renderers if available
                    if (typeof $.pivotUtilities.d3_renderers !== 'undefined')
                    {
                        $.extend(renderers, $.pivotUtilities.d3_renderers);
                    }

                    // Add C3 renderers if available and C3 is loaded
                    if (typeof $.pivotUtilities.c3_renderers !== 'undefined' && typeof c3 !== 'undefined')
                    {
                        $.extend(renderers, $.pivotUtilities.c3_renderers);
                    }

                    // Add export renderers if available
                    if (typeof $.pivotUtilities.export_renderers !== 'undefined')
                    {
                        $.extend(renderers, $.pivotUtilities.export_renderers);
                    }

                    console.log('Available renderers:', Object.keys(renderers));
                    console.log('C3 available:', typeof c3 !== 'undefined');
                    console.log('D3 available:', typeof d3 !== 'undefined');

                    // Create interactive pivot table with UI controls
                    $('#pivotTableContainer').pivotUI(data, {
                        renderers: renderers,
                        hiddenAttributes: [],
                        autoSortUnusedAttrs: true,
                        showUI: true,
                        onRefresh: function (config)
                        {
                            currentConfig = config;
                            console.log('Pivot table refreshed with config:', config);
                        }
                    });

                    console.log('Pivot table created successfully');
                } catch (error)
                {
                    console.error('Error creating pivot table:', error);
                    $('#pivotTableContainer').html(`
                            <div class="text-center text-danger py-5">
                                <i class="fas fa-exclamation-triangle fa-2x mb-3"></i>
                                <h4>Error Creating Pivot Table</h4>
                                <p>${error.message}</p>
                                <div class="mt-3">
                                    <button class="btn btn-primary" onclick="location.reload()">
                                        <i class="fas fa-refresh"></i> Reload Page
                                    </button>
                                </div>
                            </div>
                        `);
                }
            }

            function saveConfiguration(name)
            {
                if (!currentConfig)
                {
                    showMessage('No configuration to save.', 'error');
                    return;
                }

                const configData = {
                    name: name,
                    csvFile: $('#csvFileSelect').val(),
                    aggregatorName: currentConfig.aggregatorName,
                    rendererName: currentConfig.rendererName,
                    cols: currentConfig.cols,
                    rows: currentConfig.rows,
                    vals: currentConfig.vals,
                    includeValues: currentConfig.inclusions || {},
                    excludeValues: currentConfig.exclusions || {}
                };

                $.ajax({
                    url: '@Url.Action("SaveConfiguration", "PivotTable")',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(configData),
                    success: function (response)
                    {
                        if (response.success)
                        {
                            showMessage('Configuration saved successfully!', 'success');
                            $('#saveConfigModal').modal('hide');
                            $('#configName').val('');
                        } else
                        {
                            showMessage('Error: ' + response.error, 'error');
                        }
                    },
                    error: function (xhr, status, error)
                    {
                        showMessage('Failed to save configuration: ' + error, 'error');
                    }
                });
            }

            function exportData(format)
            {
                if (!currentConfig)
                {
                    showMessage('No data to export.', 'error');
                    return;
                }

                const exportData = {
                    format: format,
                    configuration: {
                        csvFile: $('#csvFileSelect').val(),
                        aggregatorName: currentConfig.aggregatorName,
                        rendererName: currentConfig.rendererName,
                        cols: currentConfig.cols,
                        rows: currentConfig.rows,
                        vals: currentConfig.vals,
                        includeValues: currentConfig.inclusions || {},
                        excludeValues: currentConfig.exclusions || {}
                    }
                };

                // Create a temporary form to download the file
                const form = $('<form>', {
                    method: 'POST',
                    action: '@Url.Action("Export", "PivotTable")'
                });

                form.append($('<input>', {
                    type: 'hidden',
                    name: 'format',
                    value: format
                }));

                form.append($('<input>', {
                    type: 'hidden',
                    name: 'configuration',
                    value: JSON.stringify(exportData.configuration)
                }));

                form.appendTo('body').submit().remove();

                $('#exportModal').modal('hide');
                showMessage('Export started. Your download should begin shortly.', 'success');
            }

            function updateUIState()
            {
                const hasFile = $('#csvFileSelect').val() !== '';
                const hasData = pivotData !== null;

                $('#loadDataBtn').prop('disabled', !hasFile);
                $('#saveConfigBtn').prop('disabled', !hasData);
                $('#exportBtn').prop('disabled', !hasData);
            }

            function showLoading(show)
            {
                if (show)
                {
                    $('#loadingOverlay').show();
                } else
                {
                    $('#loadingOverlay').hide();
                }
            }

            function showMessage(message, type)
            {
                hideMessages();

                if (type === 'error')
                {
                    $('#errorMessage').text(message).show();
                    setTimeout(() => $('#errorMessage').fadeOut(), 5000);
                } else if (type === 'success')
                {
                    $('#successMessage').text(message).show();
                    setTimeout(() => $('#successMessage').fadeOut(), 3000);
                } else
                {
                    $('#successMessage').text(message).show();
                    setTimeout(() => $('#successMessage').fadeOut(), 3000);
                }
            }

            function hideMessages()
            {
                $('#errorMessage, #successMessage').hide();
            }
        });
    </script>
}
