@model PivotTableViewModel
@{
    ViewData["Title"] = "Pivot Table Results";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.23.0/pivot.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/c3/0.4.11/c3.min.css" />
    <style>
        .results-header {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .pivot-container {
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            padding: 20px;
            min-height: 600px;
        }

        .control-panel {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
        }

        .pivot-controls {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            align-items: center;
            justify-content: space-between;
        }

        .control-group {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.9);
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 10px;
            z-index: 1000;
        }

        .column-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
            margin-top: 10px;
        }

        .column-tag {
            background: #e3f2fd;
            color: #1976d2;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8em;
            border: 1px solid #bbdefb;
        }

        .stats-bar {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 6px;
            padding: 10px;
            margin: 10px 0;
            font-size: 0.9em;
        }

        .error-container {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
        }

        .empty-state {
            text-align: center;
            color: #6c757d;
            padding: 60px 20px;
        }

        .renderer-preview {
            margin-top: 20px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
            border-left: 4px solid #007bff;
        }
    </style>
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="results-header">
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <h2 class="mb-1">
                            <i class="fas fa-chart-pie"></i> Pivot Table Analysis
                        </h2>
                        @if (!string.IsNullOrEmpty(Model.CurrentFile))
                        {
                            <h5 class="mb-0 opacity-75">@Model.CurrentFile</h5>
                        }
                    </div>
                    <div class="col-md-4 text-end">
                        <div class="fs-4 fw-bold">@Model.RecordCount.ToString("N0")</div>
                        <div class="opacity-75">Records Analyzed</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Model.CurrentFile))
    {
        <div class="row">
            <div class="col-12">
                <div class="control-panel">
                    <div class="pivot-controls">
                        <div class="control-group">
                            <label class="form-label mb-0 me-2">Quick Actions:</label>
                            <button id="refreshBtn" class="btn btn-primary btn-sm">
                                <i class="fas fa-sync-alt"></i> Refresh
                            </button>
                            <button id="resetBtn" class="btn btn-outline-secondary btn-sm">
                                <i class="fas fa-undo"></i> Reset
                            </button>
                        </div>

                        <div class="control-group">
                            <button id="saveConfigBtn" class="btn btn-success btn-sm">
                                <i class="fas fa-save"></i> Save Configuration
                            </button>
                            <button id="exportBtn" class="btn btn-info btn-sm">
                                <i class="fas fa-download"></i> Export Data
                            </button>
                            <a href="@Url.Action("FullPage", "PivotTable")" class="btn btn-outline-primary btn-sm"
                                target="_blank">
                                <i class="fas fa-expand"></i> Full Screen
                            </a>
                        </div>

                        <div class="control-group">
                            <a href="@Url.Action("SelectColumn", "PivotTable")" class="btn btn-outline-warning btn-sm">
                                <i class="fas fa-columns"></i> Change Columns
                            </a>
                            <a href="@Url.Action("Index", "PivotTable")" class="btn btn-outline-secondary btn-sm">
                                <i class="fas fa-arrow-left"></i> Back
                            </a>
                        </div>
                    </div>

                    @if (Model.ColumnHeaders != null && Model.ColumnHeaders.Any())
                    {
                        <div class="stats-bar">
                            <strong>Selected Columns (@Model.ColumnHeaders.Count):</strong>
                            <div class="column-tags">
                                @foreach (var column in Model.ColumnHeaders)
                                {
                                    <span class="column-tag">@column</span>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <div class="pivot-container position-relative">
                    <div id="loadingOverlay" class="loading-overlay" style="display: none;">
                        <div class="text-center">
                            <div class="spinner-border text-primary mb-3" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <div class="fw-bold">Processing pivot table data...</div>
                            <div class="text-muted">This may take a moment for large datasets</div>
                        </div>
                    </div>

                    <div id="errorContainer" class="error-container" style="display: none;">
                        <i class="fas fa-exclamation-triangle fa-2x mb-3"></i>
                        <h4>Error Loading Pivot Table</h4>
                        <div id="errorMessage" class="mb-3"></div>
                        <button id="retryBtn" class="btn btn-outline-danger">
                            <i class="fas fa-redo"></i> Try Again
                        </button>
                    </div>

                    <div id="pivotTableContainer">
                        <div class="empty-state">
                            <i class="fas fa-table fa-3x mb-3"></i>
                            <h4>Initializing Pivot Table</h4>
                            <p>Setting up your interactive data analysis environment...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mt-4">
            <div class="col-12">
                <div class="renderer-preview">
                    <h6><i class="fas fa-info-circle"></i> Pivot Table Features</h6>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>Drag & Drop:</strong><br>
                            <small class="text-muted">Move fields between rows, columns, and values</small>
                        </div>
                        <div class="col-md-3">
                            <strong>Multiple Renderers:</strong><br>
                            <small class="text-muted">Table, charts, heatmaps, and more</small>
                        </div>
                        <div class="col-md-3">
                            <strong>Aggregations:</strong><br>
                            <small class="text-muted">Sum, count, average, min, max, etc.</small>
                        </div>
                        <div class="col-md-3">
                            <strong>Filtering:</strong><br>
                            <small class="text-muted">Include/exclude specific values</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-12">
                <div class="empty-state">
                    <i class="fas fa-exclamation-triangle fa-3x text-warning mb-3"></i>
                    <h4>No Data Available</h4>
                    <p class="text-muted">Please select a CSV file and columns to create your pivot table.</p>
                    <div class="mt-4">
                        <a href="@Url.Action("Index", "PivotTable")" class="btn btn-primary me-3">
                            <i class="fas fa-file-csv"></i> Select CSV File
                        </a>
                        <a href="@Url.Action("SelectColumn", "PivotTable")" class="btn btn-outline-primary">
                            <i class="fas fa-columns"></i> Choose Columns
                        </a>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Save Configuration Modal -->
<div class="modal fade" id="saveConfigModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Save Pivot Configuration</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="configName" class="form-label">Configuration Name:</label>
                    <input type="text" id="configName" class="form-control" placeholder="Enter a descriptive name">
                    <div class="form-text">This will save your current pivot table setup for future use.</div>
                </div>
                <div class="mb-3">
                    <label for="configDescription" class="form-label">Description (Optional):</label>
                    <textarea id="configDescription" class="form-control" rows="2"
                        placeholder="Brief description of this configuration..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="saveConfigConfirmBtn" class="btn btn-primary">
                    <i class="fas fa-save"></i> Save Configuration
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Export Modal -->
<div class="modal fade" id="exportModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Export Pivot Table Data</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Export Format:</label>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="exportFormat" id="exportCsv" value="csv"
                            checked>
                        <label class="form-check-label" for="exportCsv">
                            <i class="fas fa-file-csv"></i> CSV (Comma-separated values)
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="exportFormat" id="exportTsv" value="tsv">
                        <label class="form-check-label" for="exportTsv">
                            <i class="fas fa-file-alt"></i> TSV (Tab-separated values)
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="exportFormat" id="exportExcel" value="excel">
                        <label class="form-check-label" for="exportExcel">
                            <i class="fas fa-file-excel"></i> Excel (.xlsx)
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="exportFormat" id="exportJson" value="json">
                        <label class="form-check-label" for="exportJson">
                            <i class="fas fa-file-code"></i> JSON (with configuration)
                        </label>
                    </div>
                </div>
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i>
                    <strong>Note:</strong> Only the currently visible pivot table data will be exported.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="exportConfirmBtn" class="btn btn-primary">
                    <i class="fas fa-download"></i> Export Data
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.13.2/jquery-ui.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.23.0/pivot.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/c3/0.4.11/c3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.23.0/d3_renderers.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.23.0/c3_renderers.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.23.0/export_renderers.min.js"></script>

    <script>
        $(document).ready(function ()
        {
            let pivotData = null;
            let currentConfig = null;

            console.log('Pivot table page loaded');
            console.log('jQuery version:', $.fn.jquery);
            console.log('jQuery UI available:', typeof $.ui !== 'undefined');
            console.log('PivotTable available:', typeof $.pivotUtilities !== 'undefined');

            // Initialize
            @if (!string.IsNullOrEmpty(Model.CurrentFile))
                {
                    <text>
                                setTimeout(() => {
                            loadPivotTableData();
                                }, 500);
                    </text>
            }

                // Event handlers
                $('#refreshBtn').click(function ()
                {
                    loadPivotTableData();
                });

            $('#resetBtn').click(function ()
            {
                if (confirm('This will reset your pivot table to its initial state. Continue?'))
                {
                    createPivotTable(pivotData);
                }
            });

            $('#retryBtn').click(function ()
            {
                loadPivotTableData();
            });

            $('#saveConfigBtn').click(function ()
            {
                if (!currentConfig)
                {
                    showMessage('Please configure your pivot table first.', 'warning');
                    return;
                }
                $('#saveConfigModal').modal('show');
            });

            $('#saveConfigConfirmBtn').click(function ()
            {
                const configName = $('#configName').val().trim();
                if (!configName)
                {
                    showMessage('Please enter a configuration name.', 'error');
                    return;
                }
                saveConfiguration(configName);
            });

            $('#exportBtn').click(function ()
            {
                if (!currentConfig)
                {
                    showMessage('Please configure your pivot table first.', 'warning');
                    return;
                }
                $('#exportModal').modal('show');
            });

            $('#exportConfirmBtn').click(function ()
            {
                const format = $('input[name="exportFormat"]:checked').val();
                exportData(format);
            });

            function loadPivotTableData()
            {
                showLoading(true);
                hideError();

                const urlParams = new URLSearchParams(window.location.search);
                const selectedColumns = urlParams.getAll('columns');

                $.ajax({
                    url: '@Url.Action("LoadCsvData", "PivotTable")',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        fileName: '@Model.CurrentFile',
                        selectedColumns: selectedColumns.length > 0 ? selectedColumns : null
                    }),
                    success: function (response)
                    {
                        if (response.success)
                        {
                            pivotData = response.data;
                            createPivotTable(response.data);
                            showMessage(`Pivot table loaded: ${response.recordCount} records processed`, 'success');
                        } else
                        {
                            showError('Error loading data: ' + response.error);
                        }
                    },
                    error: function (xhr, status, error)
                    {
                        showError('Failed to load pivot table data: ' + error);
                    },
                    complete: function ()
                    {
                        showLoading(false);
                    }
                });
            }

            function createPivotTable(data)
            {
                console.log('Creating pivot table with data:', data);
                console.log('Data length:', data ? data.length : 'null');
                console.log('Sample data:', data ? data.slice(0, 2) : 'no data');

                if (!data || data.length === 0)
                {
                    showError('No data available for pivot table analysis.');
                    return;
                }

                // Clear any existing pivot table
                $('#pivotTableContainer').empty();

                try
                {
                    // Ensure all required libraries are loaded
                    if (typeof $.pivotUtilities === 'undefined')
                    {
                        throw new Error('PivotTable.js library not loaded');
                    }

                    // Get all available renderers with fallbacks
                    const renderers = {};

                    // Always include basic renderers
                    if ($.pivotUtilities.renderers)
                    {
                        $.extend(renderers, $.pivotUtilities.renderers);
                    }

                    // Add D3 renderers if available
                    if (typeof $.pivotUtilities.d3_renderers !== 'undefined')
                    {
                        $.extend(renderers, $.pivotUtilities.d3_renderers);
                    }

                    // Add C3 renderers if available and C3 is loaded
                    if (typeof $.pivotUtilities.c3_renderers !== 'undefined' && typeof c3 !== 'undefined')
                    {
                        $.extend(renderers, $.pivotUtilities.c3_renderers);
                    }

                    // Add export renderers if available
                    if (typeof $.pivotUtilities.export_renderers !== 'undefined')
                    {
                        $.extend(renderers, $.pivotUtilities.export_renderers);
                    }

                    console.log('Available renderers:', Object.keys(renderers));
                    console.log('C3 available:', typeof c3 !== 'undefined');
                    console.log('D3 available:', typeof d3 !== 'undefined');

                    // Create interactive pivot table with UI controls
                    $('#pivotTableContainer').pivotUI(data, {
                        renderers: renderers,
                        hiddenAttributes: [],
                        menuLimit: 500,
                        unusedAttrsVertical: false,
                        autoSortUnusedAttrs: true,
                        showUI: true,
                        onRefresh: function (config)
                        {
                            currentConfig = config;
                            console.log('Pivot table configuration updated:', config);

                            // Update UI state
                            updateButtonStates();
                        }
                    });

                    console.log('Pivot table created successfully');
                    updateButtonStates();
                } catch (error)
                {
                    console.error('Error creating pivot table:', error);
                    showError('Failed to create pivot table: ' + error.message);
                }
            }

            function saveConfiguration(name)
            {
                if (!currentConfig)
                {
                    showMessage('No configuration to save.', 'error');
                    return;
                }

                const configData = {
                    name: name,
                    description: $('#configDescription').val().trim(),
                    csvFile: '@Model.CurrentFile',
                    aggregatorName: currentConfig.aggregatorName,
                    rendererName: currentConfig.rendererName,
                    cols: currentConfig.cols,
                    rows: currentConfig.rows,
                    vals: currentConfig.vals,
                    includeValues: currentConfig.inclusions || {},
                    excludeValues: currentConfig.exclusions || {}
                };

                $.ajax({
                    url: '@Url.Action("SaveConfiguration", "PivotTable")',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(configData),
                    success: function (response)
                    {
                        if (response.success)
                        {
                            showMessage('Configuration saved successfully!', 'success');
                            $('#saveConfigModal').modal('hide');
                            $('#configName').val('');
                            $('#configDescription').val('');
                        } else
                        {
                            showMessage('Error saving configuration: ' + response.error, 'error');
                        }
                    },
                    error: function (xhr, status, error)
                    {
                        showMessage('Failed to save configuration: ' + error, 'error');
                    }
                });
            }

            function exportData(format)
            {
                if (!currentConfig)
                {
                    showMessage('No data to export.', 'error');
                    return;
                }

                const exportConfig = {
                    format: format,
                    configuration: {
                        csvFile: '@Model.CurrentFile',
                        aggregatorName: currentConfig.aggregatorName,
                        rendererName: currentConfig.rendererName,
                        cols: currentConfig.cols,
                        rows: currentConfig.rows,
                        vals: currentConfig.vals,
                        includeValues: currentConfig.inclusions || {},
                        excludeValues: currentConfig.exclusions || {}
                    }
                };

                // Create temporary form for file download
                const form = $('<form>', {
                    method: 'POST',
                    action: '@Url.Action("Export", "PivotTable")'
                });

                form.append($('<input>', {
                    type: 'hidden',
                    name: 'format',
                    value: format
                }));

                form.append($('<input>', {
                    type: 'hidden',
                    name: 'configuration',
                    value: JSON.stringify(exportConfig.configuration)
                }));

                form.appendTo('body').submit().remove();

                $('#exportModal').modal('hide');
                showMessage('Export started. Your download should begin shortly.', 'success');
            }

            function updateButtonStates()
            {
                const hasData = pivotData !== null;
                const hasConfig = currentConfig !== null;

                $('#saveConfigBtn').prop('disabled', !hasConfig);
                $('#exportBtn').prop('disabled', !hasConfig);
                $('#refreshBtn').prop('disabled', !hasData);
                $('#resetBtn').prop('disabled', !hasData);
            }

            function showLoading(show)
            {
                $('#loadingOverlay').toggle(show);
            }

            function showError(message)
            {
                $('#errorMessage').text(message);
                $('#errorContainer').show();
                $('#pivotTableContainer').hide();
            }

            function hideError()
            {
                $('#errorContainer').hide();
                $('#pivotTableContainer').show();
            }

            function showMessage(message, type)
            {
                // Create toast notification
                const toastClass = type === 'success' ? 'bg-success' : type === 'error' ? 'bg-danger' : 'bg-warning';
                const toast = $(`
                            <div class="toast align-items-center text-white ${toastClass} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                                <div class="d-flex">
                                    <div class="toast-body">${message}</div>
                                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                                </div>
                            </div>
                        `);

                // Add to page and show
                if ($('.toast-container').length === 0)
                {
                    $('body').append('<div class="toast-container position-fixed top-0 end-0 p-3"></div>');
                }
                $('.toast-container').append(toast);

                const bsToast = new bootstrap.Toast(toast[0]);
                bsToast.show();

                // Remove after hiding
                toast.on('hidden.bs.toast', function ()
                {
                    $(this).remove();
                });
            }
        });
    </script>
}
