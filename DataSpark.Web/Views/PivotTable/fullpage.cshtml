@model PivotTableViewModel
@{
    ViewData["Title"] = "Interactive Pivot Table - Full Screen";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.23.0/pivot.min.css" />
    <style>
        body {
            padding: 0;
            margin: 0;
        }

        .fullscreen-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: white;
            z-index: 1000;
            overflow: auto;
        }

        .fullscreen-header {
            background: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
            padding: 10px 20px;
            position: sticky;
            top: 0;
            z-index: 1001;
        }

        .fullscreen-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .pivot-fullscreen {
            padding: 20px;
            height: calc(100vh - 60px);
            overflow: auto;
        }

        .file-info {
            font-size: 0.9em;
            color: #6c757d;
        }

        .control-buttons {
            display: flex;
            gap: 10px;
        }

        .loading-fullscreen {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
        }

        .error-fullscreen {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            color: #dc3545;
        }
    </style>
}

<div class="fullscreen-container">
    <div class="fullscreen-header">
        <div class="fullscreen-controls">
            <div>
                <h5 class="mb-0">Interactive Pivot Table</h5>
                @if (!string.IsNullOrEmpty(Model.CurrentFile))
                {
                    <div class="file-info">
                        <strong>File:</strong> @Model.CurrentFile |
                        <strong>Records:</strong> @Model.RecordCount.ToString("N0") |
                        <strong>Columns:</strong> @Model.ColumnHeaders.Count
                    </div>
                }
            </div>
            <div class="control-buttons">
                <button id="saveConfigBtn" class="btn btn-success btn-sm" disabled>
                    <i class="fas fa-save"></i> Save Config
                </button>
                <button id="exportBtn" class="btn btn-info btn-sm" disabled>
                    <i class="fas fa-download"></i> Export
                </button>
                <button id="closeFullscreenBtn" class="btn btn-outline-secondary btn-sm">
                    <i class="fas fa-times"></i> Close
                </button>
            </div>
        </div>
    </div>

    <div class="pivot-fullscreen">
        <div id="pivotTableContainer">
            @if (string.IsNullOrEmpty(Model.CurrentFile))
            {
                <div class="error-fullscreen">
                    <i class="fas fa-exclamation-triangle fa-3x mb-3"></i>
                    <h4>No CSV file selected</h4>
                    <p>Please select a CSV file from the main pivot table page.</p>
                    <a href="@Url.Action("Index", "PivotTable")" class="btn btn-primary">
                        <i class="fas fa-arrow-left"></i> Go to Main Page
                    </a>
                </div>
            }
            else
            {
                <div class="loading-fullscreen">
                    <div class="spinner-border text-primary mb-3" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <h4>Loading pivot table...</h4>
                    <p>Please wait while we prepare your data for analysis.</p>
                </div>
            }
        </div>
    </div>
</div>

<!-- Save Configuration Modal -->
<div class="modal fade" id="saveConfigModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Save Pivot Configuration</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="configName" class="form-label">Configuration Name:</label>
                    <input type="text" id="configName" class="form-control"
                        placeholder="Enter a name for this configuration">
                    <div class="form-text">Choose a descriptive name to help you identify this configuration later.
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="saveConfigConfirmBtn" class="btn btn-primary">Save Configuration</button>
            </div>
        </div>
    </div>
</div>

<!-- Export Modal -->
<div class="modal fade" id="exportModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Export Pivot Table</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Export Format:</label>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="exportFormat" id="exportCsv" value="csv"
                            checked>
                        <label class="form-check-label" for="exportCsv">CSV (Comma-separated values)</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="exportFormat" id="exportTsv" value="tsv">
                        <label class="form-check-label" for="exportTsv">TSV (Tab-separated values)</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="exportFormat" id="exportExcel" value="excel">
                        <label class="form-check-label" for="exportExcel">Excel (.xlsx)</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="exportFormat" id="exportJson" value="json">
                        <label class="form-check-label" for="exportJson">JSON (with configuration)</label>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="exportConfirmBtn" class="btn btn-primary">Export Data</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.13.2/jquery-ui.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.23.0/pivot.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/c3/0.7.20/c3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.23.0/d3_renderers.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.23.0/c3_renderers.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pivottable/2.23.0/export_renderers.min.js"></script>

    <script>
        $(document).ready(function ()
        {
            let pivotData = null;
            let currentConfig = null;

            // Event handlers
            $('#closeFullscreenBtn').click(function ()
            {
                window.close();
            });

            $('#saveConfigBtn').click(function ()
            {
                if (!pivotData)
                {
                    alert('Please load data first.');
                    return;
                }

                $('#saveConfigModal').modal('show');
            });

            $('#saveConfigConfirmBtn').click(function ()
            {
                const configName = $('#configName').val().trim();
                if (!configName)
                {
                    alert('Please enter a configuration name.');
                    return;
                }

                saveConfiguration(configName);
            });

            $('#exportBtn').click(function ()
            {
                if (!pivotData)
                {
                    alert('Please load data first.');
                    return;
                }

                $('#exportModal').modal('show');
            });

            $('#exportConfirmBtn').click(function ()
            {
                const format = $('input[name="exportFormat"]:checked').val();
                exportData(format);
            });

            // Load data if current file is available
            @if (!string.IsNullOrEmpty(Model.CurrentFile))
                {
                    <text>
                        setTimeout(() => {
                            loadCsvData('@Model.CurrentFile');
                        }, 500);
                    </text>
            }

                function loadCsvData(fileName)
                {
                    $.ajax({
                        url: '@Url.Action("LoadCsvData", "PivotTable")',
                        method: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({ fileName: fileName }),
                        success: function (response)
                        {
                            if (response.success)
                            {
                                pivotData = response.data;
                                createPivotTable(response.data);
                                updateUIState();
                            } else
                            {
                                showError('Error loading data: ' + response.error);
                            }
                        },
                        error: function (xhr, status, error)
                        {
                            showError('Failed to load CSV data: ' + error);
                        }
                    });
                }

            function createPivotTable(data)
            {
                if (!data || data.length === 0)
                {
                    showError('No data available. The selected file appears to be empty or could not be processed.');
                    return;
                }

                // Get all available renderers
                const renderers = $.extend(
                    $.pivotUtilities.renderers,
                    $.pivotUtilities.d3_renderers,
                    $.pivotUtilities.c3_renderers,
                    $.pivotUtilities.export_renderers
                );

                // Create pivot table
                $('#pivotTableContainer').pivot(data, {
                    renderers: renderers,
                    hiddenAttributes: [],
                    onRefresh: function (config)
                    {
                        currentConfig = config;
                        console.log('Pivot table refreshed with config:', config);
                    }
                });
            }

            function saveConfiguration(name)
            {
                if (!currentConfig)
                {
                    alert('No configuration to save.');
                    return;
                }

                const configData = {
                    name: name,
                    csvFile: '@Model.CurrentFile',
                    aggregatorName: currentConfig.aggregatorName,
                    rendererName: currentConfig.rendererName,
                    cols: currentConfig.cols,
                    rows: currentConfig.rows,
                    vals: currentConfig.vals,
                    includeValues: currentConfig.inclusions || {},
                    excludeValues: currentConfig.exclusions || {}
                };

                $.ajax({
                    url: '@Url.Action("SaveConfiguration", "PivotTable")',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(configData),
                    success: function (response)
                    {
                        if (response.success)
                        {
                            alert('Configuration saved successfully!');
                            $('#saveConfigModal').modal('hide');
                            $('#configName').val('');
                        } else
                        {
                            alert('Error: ' + response.error);
                        }
                    },
                    error: function (xhr, status, error)
                    {
                        alert('Failed to save configuration: ' + error);
                    }
                });
            }

            function exportData(format)
            {
                if (!currentConfig)
                {
                    alert('No data to export.');
                    return;
                }

                const exportData = {
                    format: format,
                    configuration: {
                        csvFile: '@Model.CurrentFile',
                        aggregatorName: currentConfig.aggregatorName,
                        rendererName: currentConfig.rendererName,
                        cols: currentConfig.cols,
                        rows: currentConfig.rows,
                        vals: currentConfig.vals,
                        includeValues: currentConfig.inclusions || {},
                        excludeValues: currentConfig.exclusions || {}
                    }
                };

                // Create a temporary form to download the file
                const form = $('<form>', {
                    method: 'POST',
                    action: '@Url.Action("Export", "PivotTable")'
                });

                form.append($('<input>', {
                    type: 'hidden',
                    name: 'format',
                    value: format
                }));

                form.append($('<input>', {
                    type: 'hidden',
                    name: 'configuration',
                    value: JSON.stringify(exportData.configuration)
                }));

                form.appendTo('body').submit().remove();

                $('#exportModal').modal('hide');
                alert('Export started. Your download should begin shortly.');
            }

            function updateUIState()
            {
                const hasData = pivotData !== null;
                $('#saveConfigBtn').prop('disabled', !hasData);
                $('#exportBtn').prop('disabled', !hasData);
            }

            function showError(message)
            {
                $('#pivotTableContainer').html(`
                        <div class="error-fullscreen">
                            <i class="fas fa-exclamation-triangle fa-3x mb-3"></i>
                            <h4>Error</h4>
                            <p>${message}</p>
                            <a href="@Url.Action("Index", "PivotTable")" class="btn btn-primary">
                                <i class="fas fa-arrow-left"></i> Go to Main Page
                            </a>
                        </div>
                    `);
            }
        });
    </script>
}
